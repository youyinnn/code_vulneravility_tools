<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java"><package>package <name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>testcode</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WebServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<class><annotation>@<name>WebServlet</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"/xpathi-00/BenchmarkTest01316"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>BenchmarkTest01316</name> <super_list><extends>extends <super><name>HttpServlet</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doGet</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>doPost</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doPost</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html;charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>param</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getParameter</name></name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest01316"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>param</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>bar</name> <init>= <expr><operator>new</operator> <call><name>Test</name><argument_list>()</argument_list></call><operator>.</operator><call><name>doSomething</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>Utils</name><operator>.</operator><name>getFileFromClasspath</name></name><argument_list>(<argument><expr><literal type="string">"employees.xml"</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilderFactory</name></name></type> <name>builderFactory</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilderFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>builderFactory</name><operator>.</operator><name>setFeature</name></name><argument_list>(<argument><expr><literal type="string">"http://apache.org/xml/features/disallow-doctype-decl"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>builderFactory</name><operator>.</operator><name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name></type> <name>xmlDocument</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathFactory</name></name></type> <name>xpf</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPath</name></name></type> <name>xp</name> <init>= <expr><call><name><name>xpf</name><operator>.</operator><name>newXPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Your query results are: &lt;br/&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>expression</name> <init>= <expr><literal type="string">"/Employees/Employee[@emplid='"</literal> <operator>+</operator> <name>bar</name> <operator>+</operator> <literal type="string">"']"</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><call><name><name>xp</name><operator>.</operator><name>evaluate</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br/&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>xpath</name><operator>.</operator><name>XPathExpressionException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"XPath expression exception caught and swallowed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"XPath expression exception caught and swallowed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"XPath expression exception caught and swallowed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>Test</name> <block>{

        <function><type><specifier>public</specifier> <name>String</name></type> <name>doSomething</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>param</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>bar</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">196</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">500</literal> <operator>/</operator> <literal type="number">42</literal><operator>)</operator> <operator>+</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bar</name> <operator>=</operator> <name>param</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>bar</name> <operator>=</operator> <literal type="string">"This should never happen"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <return>return <expr><name>bar</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>

</unit>
