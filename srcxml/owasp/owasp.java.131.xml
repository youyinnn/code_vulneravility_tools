<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="srcxml/owasp/owasp.java.131"><package>package <name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>testcode</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WebServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<class><annotation>@<name>WebServlet</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"/ldapi-00/BenchmarkTest00012"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>BenchmarkTest00012</name> <super_list><extends>extends <super><name>HttpServlet</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doGet</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>doPost</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doPost</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html;charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>param</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>headers</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getHeaders</name></name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest00012"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>headers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>headers</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name><name>headers</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLDecoder</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>LDAPManager</name></name></type> <name>ads</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>LDAPManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>base</name> <init>= <expr><literal type="string">"ou=users,ou=system"</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchControls</name></name></type> <name>sc</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchControls</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>setSearchScope</name></name><argument_list>(<argument><expr><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchControls</name><operator>.</operator><name>SUBTREE_SCOPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><literal type="string">"(&amp;(objectclass=person))(|(uid="</literal> <operator>+</operator> <name>param</name> <operator>+</operator> <literal type="string">")(street={0}))"</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>filters</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><literal type="string">"The streetz 4 Ms bar"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>DirContext</name></name></type> <name>ctx</name> <init>= <expr><call><name><name>ads</name><operator>.</operator><name>getDirContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>InitialDirContext</name></name></type> <name>idc</name> <init>= <expr><operator>(</operator><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>InitialDirContext</name></name><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name><name>NamingEnumeration</name><argument_list type="generic">&lt;<argument><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchResult</name></name></argument>&gt;</argument_list></name></name></type> <name>results</name> <init>= <expr><call><name><name>idc</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>results</name><operator>.</operator><name>hasMore</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchResult</name></name></type> <name>sr</name> <init>= <expr><operator>(</operator><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>SearchResult</name></name><operator>)</operator> <call><name><name>results</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>Attributes</name></name></type> <name>attrs</name> <init>= <expr><call><name><name>sr</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>Attribute</name></name></type> <name>attr</name> <init>= <expr><call><name><name>attrs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"uid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>directory</name><operator>.</operator><name>Attribute</name></name></type> <name>attr2</name> <init>= <expr><call><name><name>attrs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"street"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"LDAP query results:&lt;br&gt;"</literal> <operator>+</operator> <literal type="string">" Record found with name "</literal> <operator>+</operator> <call><name><name>attr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal> <operator>+</operator> <literal type="string">"Address: "</literal> <operator>+</operator> <call><name><name>attr2</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"LDAP query results: nothing found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>javax</name><operator>.</operator><name>naming</name><operator>.</operator><name>NamingException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ServletException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>ads</name><operator>.</operator><name>closeDirContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ServletException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>
}</block></class>
</unit>
