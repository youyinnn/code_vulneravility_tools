<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java"><package>package <name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>testcode</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WebServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<class><annotation>@<name>WebServlet</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"/sqli-00/BenchmarkTest00115"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>BenchmarkTest00115</name> <super_list><extends>extends <super><name>HttpServlet</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doGet</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name></type> <name>userCookie</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest00115"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setMaxAge</name></name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setSecure</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setPath</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getRequestURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>addCookie</name></name><argument_list>(<argument><expr><name>userCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>RequestDispatcher</name></name></type> <name>rd</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/sqli-00/BenchmarkTest00115.html"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rd</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doPost</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html;charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name><index>[]</index></name></type> <name>theCookies</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getCookies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>param</name> <init>= <expr><literal type="string">"noCookieValueSupplied"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>theCookies</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name></type> <name>theCookie</name> <range>: <expr><name>theCookies</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>theCookie</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest00115"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLDecoder</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>theCookie</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>bar</name> <init>= <expr><literal type="string">"safe!"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>map11928</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map11928</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"keyA-11928"</literal></expr></argument>, <argument><expr><literal type="string">"a-Value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map11928</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"keyB-11928"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map11928</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"keyC"</literal></expr></argument>, <argument><expr><literal type="string">"another-Value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bar</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <call><name><name>map11928</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"keyB-11928"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><literal type="string">"INSERT INTO users (username, password) VALUES ('foo','"</literal> <operator>+</operator> <name>bar</name> <operator>+</operator> <literal type="string">"')"</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Statement</name></name></type> <name>statement</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>DatabaseHelper</name><operator>.</operator><name>getSqlStatement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>executeUpdate</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"USERNAME"</literal></expr>, <expr><literal type="string">"PASSWORD"</literal></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>DatabaseHelper</name><operator>.</operator><name>outputUpdateComplete</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>DatabaseHelper</name><operator>.</operator><name>hideSQLErrors</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Error processing request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ServletException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>

</unit>
