<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="srcxml/owasp/owasp.java.10"><package>package <name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>testcode</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>ServletException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WebServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServlet</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletRequest</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>HttpServletResponse</name></name>;</import>

<class><annotation>@<name>WebServlet</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"/pathtraver-00/BenchmarkTest00063"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>BenchmarkTest00063</name> <super_list><extends>extends <super><name>HttpServlet</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doGet</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name></type> <name>userCookie</name> <init>= <expr><operator>new</operator> <call><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest00063"</literal></expr></argument>, <argument><expr><literal type="string">"FileName"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setMaxAge</name></name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setSecure</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userCookie</name><operator>.</operator><name>setPath</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getRequestURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>addCookie</name></name><argument_list>(<argument><expr><name>userCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>RequestDispatcher</name></name></type> <name>rd</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getRequestDispatcher</name></name><argument_list>(<argument><expr><literal type="string">"/pathtraver-00/BenchmarkTest00063.html"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rd</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>doPost</name><parameter_list>(<parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServletException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setContentType</name></name><argument_list>(<argument><expr><literal type="string">"text/html;charset=UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name><index>[]</index></name></type> <name>theCookies</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>getCookies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>param</name> <init>= <expr><literal type="string">"noCookieValueSupplied"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>theCookies</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>Cookie</name></name></type> <name>theCookie</name> <range>: <expr><name>theCookies</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>theCookie</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"BenchmarkTest00063"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLDecoder</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>theCookie</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>bar</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">7</literal> <operator>*</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">200</literal></expr> ?</condition><then> <expr><literal type="string">"This_should_always_happen"</literal></expr> </then><else>: <expr><name>param</name></expr></else></ternary></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name></type> <name>fis</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>fileName</name> <operator>=</operator> <name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>benchmark</name><operator>.</operator><name>helpers</name><operator>.</operator><name>Utils</name><operator>.</operator><name>testfileDir</name></name> <operator>+</operator> <name>bar</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fis</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>fis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"The beginning of file: '"</literal> <operator>+</operator> <call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>esapi</name><operator>.</operator><name>ESAPI</name><operator>.</operator><name>encoder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>encodeForHTML</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"' is:\n\n"</literal> <operator>+</operator> <call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>esapi</name><operator>.</operator><name>ESAPI</name><operator>.</operator><name>encoder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>encodeForHTML</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Couldn't open FileInputStream on file: '"</literal> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>getWriter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Problem getting FileInputStream: "</literal> <operator>+</operator> <call><name><name>org</name><operator>.</operator><name>owasp</name><operator>.</operator><name>esapi</name><operator>.</operator><name>ESAPI</name><operator>.</operator><name>encoder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>encodeForHTML</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fis</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fis</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>
}</block></class>
</unit>
