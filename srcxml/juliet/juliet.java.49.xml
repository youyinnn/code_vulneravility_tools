<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java"><package>package <name><name>testcases</name><operator>.</operator><name>CWE566_Authorization_Bypass_Through_SQL_Primary</name></name>;</package>

<import>import <name><name>testcasesupport</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Level</name></name>;</import>

<class><specifier>public</specifier> class <name>CWE566_Authorization_Bypass_Through_SQL_Primary__Servlet_81_goodG2B</name> <super_list><extends>extends <super><name>CWE566_Authorization_Bypass_Through_SQL_Primary__Servlet_81_base</name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>action</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>HttpServletRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>HttpServletResponse</name></type> <name>response</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Connection</name></type> <name>dBConnection</name> <init>= <expr><call><name><name>IO</name><operator>.</operator><name>getDBConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PreparedStatement</name></type> <name>preparedStatement</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultSet</name></type> <name>resultSet</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>nfx</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>preparedStatement</name> <operator>=</operator> <call><name><name>dBConnection</name><operator>.</operator><name>prepareStatement</name></name><argument_list>(<argument><expr><literal type="string">"select * from invoices where uid=?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>preparedStatement</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resultSet</name> <operator>=</operator> <call><name><name>preparedStatement</name><operator>.</operator><name>executeQuery</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>IO</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><literal type="string">"bad() - result requested: "</literal> <operator>+</operator> <name>data</name> <operator>+</operator> <literal type="string">"
"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>exceptSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>IO</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>WARNING</name></name></expr></argument>, <argument><expr><literal type="string">"Error executing query"</literal></expr></argument>, <argument><expr><name>exceptSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>resultSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>resultSet</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>exceptSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>IO</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>WARNING</name></name></expr></argument>, <argument><expr><literal type="string">"Could not close ResultSet"</literal></expr></argument>, <argument><expr><name>exceptSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>preparedStatement</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>preparedStatement</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>exceptSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>IO</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>WARNING</name></name></expr></argument>, <argument><expr><literal type="string">"Could not close PreparedStatement"</literal></expr></argument>, <argument><expr><name>exceptSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>dBConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>dBConnection</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>exceptSql</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>IO</name><operator>.</operator><name>logger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>Level</name><operator>.</operator><name>WARNING</name></name></expr></argument>, <argument><expr><literal type="string">"Could not close Connection"</literal></expr></argument>, <argument><expr><name>exceptSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>
}</block></class>

</unit>
