<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java"><package>package <name><name>testcases</name><operator>.</operator><name>CWE23_Relative_Path_Traversal</name></name>;</package>

<import>import <name><name>testcasesupport</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>servlet</name><operator>.</operator><name>http</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Level</name></name>;</import>

<class><specifier>public</specifier> class <name>CWE23_Relative_Path_Traversal__database_81_bad</name> <super_list><extends>extends <super><name>CWE23_Relative_Path_Traversal__database_81_base</name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>action</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>root</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"win"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"C:\uploads\";
        } else {
            root = "</literal><operator>/</operator><name>home</name><operator>/</operator><name>user</name><operator>/</operator><name>uploads</name><operator>/</operator><literal type="string">";
        }
        if (data != null) {
            File file = new File(root + data);
            FileInputStream streamFileInputSink = null;
            InputStreamReader readerInputStreamSink = null;
            BufferedReader readerBufferdSink = null;
            if (file.exists() &amp;&amp; file.isFile()) {
                try {
                    streamFileInputSink = new FileInputStream(file);
                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, "</literal><name>UTF</name><operator>-</operator><literal type="number">8</literal><literal type="string">");
                    readerBufferdSink = new BufferedReader(readerInputStreamSink);
                    IO.writeLine(readerBufferdSink.readLine());
                } catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "</literal><name>Error</name> <name>with</name> <name>stream</name> <name>reading</name><literal type="string">", exceptIO);
                } finally {
                    try {
                        if (readerBufferdSink != null) {
                            readerBufferdSink.close();
                        }
                    } catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "</literal><name>Error</name> <name>closing</name> <name>BufferedReader</name><literal type="string">", exceptIO);
                    }
                    try {
                        if (readerInputStreamSink != null) {
                            readerInputStreamSink.close();
                        }
                    } catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "</literal><name>Error</name> <name>closing</name> <name>InputStreamReader</name><literal type="string">", exceptIO);
                    }
                    try {
                        if (streamFileInputSink != null) {
                            streamFileInputSink.close();
                        }
                    } catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "</literal><name>Error</name> <name>closing</name> <name>FileInputStream</name><literal type="string">"</literal></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></function></block></class>, exceptIO);
                    }
                }
            }
        }
    }
}

</unit>
