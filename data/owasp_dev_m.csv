sentence,label
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00009"")
public class BenchmarkTest00009 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""sha-384"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""sha-384"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = param;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00010"")
public class BenchmarkTest00010 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        try {
            int randNumber = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt(99);
            String rememberMeKey = Integer.toString(randNumber);
            String user = ""SafeInga"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt(int) - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt(int) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00016"")
public class BenchmarkTest00016 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00016"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(true);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: true"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00022"")
public class BenchmarkTest00022 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00022"");
        if (param == null)
            param = """";
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256"");
            byte[] input = { (byte) '?' };
            Object inputParam = param;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00042"")
public class BenchmarkTest00042 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00042"");
        if (param == null)
            param = """";
        try {
            int r = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt();
            String rememberMeKey = Integer.toString(r);
            String user = ""SafeIngrid"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00051"")
public class BenchmarkTest00051 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheValue(""BenchmarkTest00051"");
        String a1 = """";
        String a2 = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            a1 = ""cmd.exe"";
            a2 = ""/c"";
        } else {
            a1 = ""sh"";
            a2 = ""-c"";
        }
        String[] args = { a1, a2, ""echo "" + param };
        ProcessBuilder pb = new ProcessBuilder(args);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.lang.String[]) Test Case"");
            throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00052"")
public class BenchmarkTest00052 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheValue(""BenchmarkTest00052"");
        String sql = ""{call "" + param + ""}"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.CallableStatement statement = connection.prepareCall(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
            java.sql.ResultSet rs = statement.executeQuery();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00054"")
public class BenchmarkTest00054 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00054"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-00/BenchmarkTest00054.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00054"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = param;
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(16);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00058"")
public class BenchmarkTest00058 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00058"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-00/BenchmarkTest00058.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00058"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = param;
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DESEDE/ECB/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESEDE"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00059"")
public class BenchmarkTest00059 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00059"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-00/BenchmarkTest00059.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00059"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        StringBuilder sbxyz22532 = new StringBuilder(param);
        String bar = sbxyz22532.append(""_SafeStuff"").toString();
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00063"")
public class BenchmarkTest00063 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00063"", ""FileName"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/pathtraver-00/BenchmarkTest00063.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00063"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting FileInputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00064"")
public class BenchmarkTest00064 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00064"", ""FileName"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/pathtraver-00/BenchmarkTest00064.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00064"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00069"")
public class BenchmarkTest00069 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00069"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00069.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00069"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""sha-384"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""sha-384"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00072"")
public class BenchmarkTest00072 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00072"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00072.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00072"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-512"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00075"")
public class BenchmarkTest00075 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00075"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00075.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00075"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg2"", ""SHA5"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00076"")
public class BenchmarkTest00076 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00076"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00076.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00076"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg2"", ""SHA5"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00088"")
public class BenchmarkTest00088 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00088"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/securecookie-00/BenchmarkTest00088.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00088"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(true);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: true"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00089"")
public class BenchmarkTest00089 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00089"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/securecookie-00/BenchmarkTest00089.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00089"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(true);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: true"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00090"")
public class BenchmarkTest00090 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00090"", ""ls"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/cmdi-00/BenchmarkTest00090.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00090"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00093"")
public class BenchmarkTest00093 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00093"", ""ls"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/cmdi-00/BenchmarkTest00093.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00093"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00094"")
public class BenchmarkTest00094 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00094"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00094.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00094"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map52993 = new java.util.HashMap<String, Object>();
        map52993.put(""keyA-52993"", ""a_Value"");
        map52993.put(""keyB-52993"", param);
        map52993.put(""keyC"", ""another_Value"");
        bar = (String) map52993.get(""keyB-52993"");
        bar = (String) map52993.get(""keyA-52993"");
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00095"")
public class BenchmarkTest00095 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00095"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00095.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00095"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map45268 = new java.util.HashMap<String, Object>();
        map45268.put(""keyA-45268"", ""a-Value"");
        map45268.put(""keyB-45268"", param);
        map45268.put(""keyC"", ""another-Value"");
        bar = (String) map45268.get(""keyB-45268"");
        try {
            double stuff = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextGaussian();
            String rememberMeKey = Double.toString(stuff).substring(2);
            String user = ""SafeGayle"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextGaussian() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextGaussian() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00096"")
public class BenchmarkTest00096 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00096"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00096.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00096"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            int randNumber = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt(99);
            String rememberMeKey = Integer.toString(randNumber);
            String user = ""SafeInga"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt(int) - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt(int) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00097"")
public class BenchmarkTest00097 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00097"", ""color"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/trustbound-00/BenchmarkTest00097.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00097"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        request.getSession().putValue(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: 10340 saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00099"")
public class BenchmarkTest00099 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00099"", ""my_userid"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/trustbound-00/BenchmarkTest00099.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00099"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00104"")
public class BenchmarkTest00104 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00104"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00104.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00104"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring batchUpdate method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00105"")
public class BenchmarkTest00105 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00105"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00105.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00105"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.addBatch(sql);
            int[] counts = statement.executeBatch();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00107"")
public class BenchmarkTest00107 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00107"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00107.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00107"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String a18521 = param;
        StringBuilder b18521 = new StringBuilder(a18521);
        b18521.append("" SafeStuff"");
        b18521.replace(b18521.length() - ""Chars"".length(), b18521.length(), ""Chars"");
        java.util.HashMap<String, Object> map18521 = new java.util.HashMap<String, Object>();
        map18521.put(""key18521"", b18521.toString());
        String c18521 = (String) map18521.get(""key18521"");
        String d18521 = c18521.substring(0, c18521.length() - 1);
        String e18521 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d18521.getBytes())));
        String f18521 = e18521.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g18521 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g18521);
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00110"")
public class BenchmarkTest00110 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00110"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00110.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00110"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String a69840 = param;
        StringBuilder b69840 = new StringBuilder(a69840);
        b69840.append("" SafeStuff"");
        b69840.replace(b69840.length() - ""Chars"".length(), b69840.length(), ""Chars"");
        java.util.HashMap<String, Object> map69840 = new java.util.HashMap<String, Object>();
        map69840.put(""key69840"", b69840.toString());
        String c69840 = (String) map69840.get(""key69840"");
        String d69840 = c69840.substring(0, c69840.length() - 1);
        String e69840 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d69840.getBytes())));
        String f69840 = e69840.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g69840 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g69840);
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, new String[] { ""username"", ""password"" });
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00113"")
public class BenchmarkTest00113 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00113"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00113.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00113"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map21657 = new java.util.HashMap<String, Object>();
        map21657.put(""keyA-21657"", ""a_Value"");
        map21657.put(""keyB-21657"", param);
        map21657.put(""keyC"", ""another_Value"");
        bar = (String) map21657.get(""keyB-21657"");
        bar = (String) map21657.get(""keyA-21657"");
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql);
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00114"")
public class BenchmarkTest00114 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00114"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00114.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00114"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new int[] { 1, 2 });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest00116"")
public class BenchmarkTest00116 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00116"", ""2222"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/xpathi-00/BenchmarkTest00116.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00116"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map51005 = new java.util.HashMap<String, Object>();
        map51005.put(""keyA-51005"", ""a_Value"");
        map51005.put(""keyB-51005"", param);
        map51005.put(""keyC"", ""another_Value"");
        bar = (String) map51005.get(""keyB-51005"");
        bar = (String) map51005.get(""keyA-51005"");
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(""Your query results are: <br/>"");
            org.w3c.dom.NodeList nodeList = (org.w3c.dom.NodeList) xp.compile(expression).evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);
            for (int i = 0; i < nodeList.getLength(); i++) {
                org.w3c.dom.Element value = (org.w3c.dom.Element) nodeList.item(i);
                response.getWriter().println(value.getTextContent() + ""<br/>"");
            }
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest00117"")
public class BenchmarkTest00117 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00117"", ""2222"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/xpathi-00/BenchmarkTest00117.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00117"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(""Your query results are: <br/>"");
            org.w3c.dom.NodeList nodeList = (org.w3c.dom.NodeList) xp.compile(expression).evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);
            for (int i = 0; i < nodeList.getLength(); i++) {
                org.w3c.dom.Element value = (org.w3c.dom.Element) nodeList.item(i);
                response.getWriter().println(value.getTextContent() + ""<br/>"");
            }
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest00118"")
public class BenchmarkTest00118 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00118"", ""2222"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/xpathi-00/BenchmarkTest00118.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00118"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            response.getWriter().println(""Your query results are: <br/>"");
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(xp.evaluate(expression, xmlDocument) + ""<br/>"");
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00121"")
public class BenchmarkTest00121 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00121"") != null) {
            param = request.getHeader(""BenchmarkTest00121"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(16);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00122"")
public class BenchmarkTest00122 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00122"") != null) {
            param = request.getHeader(""BenchmarkTest00122"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(16);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00126"")
public class BenchmarkTest00126 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00126"") != null) {
            param = request.getHeader(""BenchmarkTest00126"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DESEDE/ECB/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESEDE"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00127"")
public class BenchmarkTest00127 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00127"") != null) {
            param = request.getHeader(""BenchmarkTest00127"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00128"")
public class BenchmarkTest00128 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00128"") != null) {
            param = request.getHeader(""BenchmarkTest00128"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00129"")
public class BenchmarkTest00129 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00129"") != null) {
            param = request.getHeader(""BenchmarkTest00129"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00130"")
public class BenchmarkTest00130 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00130"") != null) {
            param = request.getHeader(""BenchmarkTest00130"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00131"")
public class BenchmarkTest00131 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00131"") != null) {
            param = request.getHeader(""BenchmarkTest00131"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        java.io.File fileTarget = new java.io.File(bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00132"")
public class BenchmarkTest00132 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00132"") != null) {
            param = request.getHeader(""BenchmarkTest00132"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting FileInputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00134"")
public class BenchmarkTest00134 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00134"") != null) {
            param = request.getHeader(""BenchmarkTest00134"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            java.io.FileInputStream fileInputStream = new java.io.FileInputStream(fileName);
            java.io.FileDescriptor fd = fileInputStream.getFD();
            fos = new java.io.FileOutputStream(fd);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00135"")
public class BenchmarkTest00135 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00135"") != null) {
            param = request.getHeader(""BenchmarkTest00135"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            java.io.FileInputStream fileInputStream = new java.io.FileInputStream(fileName);
            java.io.FileDescriptor fd = fileInputStream.getFD();
            fos = new java.io.FileOutputStream(fd);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00136"")
public class BenchmarkTest00136 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00136"") != null) {
            param = request.getHeader(""BenchmarkTest00136"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName, false);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00137"")
public class BenchmarkTest00137 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00137"") != null) {
            param = request.getHeader(""BenchmarkTest00137"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map53289 = new java.util.HashMap<String, Object>();
        map53289.put(""keyA-53289"", ""a_Value"");
        map53289.put(""keyB-53289"", param);
        map53289.put(""keyC"", ""another_Value"");
        bar = (String) map53289.get(""keyB-53289"");
        bar = (String) map53289.get(""keyA-53289"");
        String fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
        java.io.InputStream is = null;
        try {
            java.nio.file.Path path = java.nio.file.Paths.get(fileName);
            is = java.nio.file.Files.newInputStream(path, java.nio.file.StandardOpenOption.READ);
            byte[] b = new byte[1000];
            int size = is.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
            is.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open InputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting InputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (is != null) {
                try {
                    is.close();
                    is = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00138"")
public class BenchmarkTest00138 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00138"") != null) {
            param = request.getHeader(""BenchmarkTest00138"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person))(|(uid="" + bar + "")(street={0}))"";
            Object[] filters = new Object[] { ""The streetz 4 Ms bar"" };
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            javax.naming.directory.InitialDirContext idc = (javax.naming.directory.InitialDirContext) ctx;
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = idc.search(base, filter, filters, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00139"")
public class BenchmarkTest00139 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00139"") != null) {
            param = request.getHeader(""BenchmarkTest00139"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a48394 = param;
        StringBuilder b48394 = new StringBuilder(a48394);
        b48394.append("" SafeStuff"");
        b48394.replace(b48394.length() - ""Chars"".length(), b48394.length(), ""Chars"");
        java.util.HashMap<String, Object> map48394 = new java.util.HashMap<String, Object>();
        map48394.put(""key48394"", b48394.toString());
        String c48394 = (String) map48394.get(""key48394"");
        String d48394 = c48394.substring(0, c48394.length() - 1);
        String e48394 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d48394.getBytes())));
        String f48394 = e48394.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g48394 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g48394);
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person)(uid="" + bar + ""))"";
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            javax.naming.directory.InitialDirContext idc = (javax.naming.directory.InitialDirContext) ctx;
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = idc.search(base, filter, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00142"")
public class BenchmarkTest00142 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00142"") != null) {
            param = request.getHeader(""BenchmarkTest00142"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00147"")
public class BenchmarkTest00147 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", bar };
        response.getWriter().format(""Formatted like: %1$s and %2$s."", obj);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00151"")
public class BenchmarkTest00151 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().printf(bar, obj);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00158"")
public class BenchmarkTest00158 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00158"") != null) {
            param = request.getHeader(""BenchmarkTest00158"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        java.util.List<String> argList = new java.util.ArrayList<String>();
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            argList.add(""cmd.exe"");
            argList.add(""/c"");
        } else {
            argList.add(""sh"");
            argList.add(""-c"");
        }
        argList.add(""echo "" + bar);
        ProcessBuilder pb = new ProcessBuilder(argList);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.util.List) Test Case"");
            throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00171"")
public class BenchmarkTest00171 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00171"") != null) {
            param = request.getHeader(""BenchmarkTest00171"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map40534 = new java.util.HashMap<String, Object>();
        map40534.put(""keyA-40534"", ""a_Value"");
        map40534.put(""keyB-40534"", param);
        map40534.put(""keyC"", ""another_Value"");
        bar = (String) map40534.get(""keyB-40534"");
        bar = (String) map40534.get(""keyA-40534"");
        String cmd = """";
        String a1 = """";
        String a2 = """";
        String[] args = null;
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            a1 = ""cmd.exe"";
            a2 = ""/c"";
            cmd = ""echo "";
            args = new String[] { a1, a2, cmd, bar };
        } else {
            a1 = ""sh"";
            a2 = ""-c"";
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""ls "");
            args = new String[] { a1, a2, cmd + bar };
        }
        String[] argsEnv = { ""foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00175"")
public class BenchmarkTest00175 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00175"") != null) {
            param = request.getHeader(""BenchmarkTest00175"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map50591 = new java.util.HashMap<String, Object>();
        map50591.put(""keyA-50591"", ""a_Value"");
        map50591.put(""keyB-50591"", param);
        map50591.put(""keyC"", ""another_Value"");
        bar = (String) map50591.get(""keyB-50591"");
        bar = (String) map50591.get(""keyA-50591"");
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00177"")
public class BenchmarkTest00177 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00177"") != null) {
            param = request.getHeader(""BenchmarkTest00177"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00178"")
public class BenchmarkTest00178 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00178"") != null) {
            param = request.getHeader(""BenchmarkTest00178"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            byte[] randomBytes = new byte[40];
            getNextNumber(numGen, randomBytes);
            String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);
            String user = ""SafeBystander"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextBytes() - TestCase"");
            throw new ServletException(e);
        } finally {
            response.getWriter().println(""Randomness Test java.security.SecureRandom.nextBytes(byte[]) executed"");
        }
    }

    void getNextNumber(java.util.Random generator, byte[] barray) {
        generator.nextBytes(barray);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00179"")
public class BenchmarkTest00179 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00179"") != null) {
            param = request.getHeader(""BenchmarkTest00179"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00180"")
public class BenchmarkTest00180 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00180"") != null) {
            param = request.getHeader(""BenchmarkTest00180"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            double rand = getNextNumber(numGen);
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonatella"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }

    double getNextNumber(java.util.Random generator) {
        return generator.nextDouble();
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00181"")
public class BenchmarkTest00181 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00181"") != null) {
            param = request.getHeader(""BenchmarkTest00181"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00182"")
public class BenchmarkTest00182 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00182"") != null) {
            param = request.getHeader(""BenchmarkTest00182"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a48649 = param;
        StringBuilder b48649 = new StringBuilder(a48649);
        b48649.append("" SafeStuff"");
        b48649.replace(b48649.length() - ""Chars"".length(), b48649.length(), ""Chars"");
        java.util.HashMap<String, Object> map48649 = new java.util.HashMap<String, Object>();
        map48649.put(""key48649"", b48649.toString());
        String c48649 = (String) map48649.get(""key48649"");
        String d48649 = c48649.substring(0, c48649.length() - 1);
        String e48649 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d48649.getBytes())));
        String f48649 = e48649.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g48649 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g48649);
        try {
            double stuff = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextGaussian();
            String rememberMeKey = Double.toString(stuff).substring(2);
            String user = ""SafeGayle"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextGaussian() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextGaussian() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00183"")
public class BenchmarkTest00183 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00183"") != null) {
            param = request.getHeader(""BenchmarkTest00183"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        try {
            double stuff = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextGaussian();
            String rememberMeKey = Double.toString(stuff).substring(2);
            String user = ""SafeGayle"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextGaussian() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextGaussian() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00184"")
public class BenchmarkTest00184 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00184"") != null) {
            param = request.getHeader(""BenchmarkTest00184"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map46743 = new java.util.HashMap<String, Object>();
        map46743.put(""keyA-46743"", ""a-Value"");
        map46743.put(""keyB-46743"", param);
        map46743.put(""keyC"", ""another-Value"");
        bar = (String) map46743.get(""keyB-46743"");
        try {
            int randNumber = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt(99);
            String rememberMeKey = Integer.toString(randNumber);
            String user = ""SafeInga"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt(int) - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt(int) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00185"")
public class BenchmarkTest00185 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00185"") != null) {
            param = request.getHeader(""BenchmarkTest00185"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map60659 = new java.util.HashMap<String, Object>();
        map60659.put(""keyA-60659"", ""a_Value"");
        map60659.put(""keyB-60659"", param);
        map60659.put(""keyC"", ""another_Value"");
        bar = (String) map60659.get(""keyB-60659"");
        bar = (String) map60659.get(""keyA-60659"");
        try {
            int randNumber = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt(99);
            String rememberMeKey = Integer.toString(randNumber);
            String user = ""SafeInga"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt(int) - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt(int) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00186"")
public class BenchmarkTest00186 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00186"") != null) {
            param = request.getHeader(""BenchmarkTest00186"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a18509 = param;
        StringBuilder b18509 = new StringBuilder(a18509);
        b18509.append("" SafeStuff"");
        b18509.replace(b18509.length() - ""Chars"".length(), b18509.length(), ""Chars"");
        java.util.HashMap<String, Object> map18509 = new java.util.HashMap<String, Object>();
        map18509.put(""key18509"", b18509.toString());
        String c18509 = (String) map18509.get(""key18509"");
        String d18509 = c18509.substring(0, c18509.length() - 1);
        String e18509 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d18509.getBytes())));
        String f18509 = e18509.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g18509 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g18509);
        try {
            int randNumber = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt(99);
            String rememberMeKey = Integer.toString(randNumber);
            String user = ""SafeInga"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt(int) - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt(int) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00187"")
public class BenchmarkTest00187 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00187"") != null) {
            param = request.getHeader(""BenchmarkTest00187"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        try {
            int r = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt();
            String rememberMeKey = Integer.toString(r);
            String user = ""SafeIngrid"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00188"")
public class BenchmarkTest00188 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00188"") != null) {
            param = request.getHeader(""BenchmarkTest00188"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        try {
            long l = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextLong();
            String rememberMeKey = Long.toString(l);
            String user = ""SafeLogan"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextLong() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextLong() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00189"")
public class BenchmarkTest00189 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00189"") != null) {
            param = request.getHeader(""BenchmarkTest00189"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a14330 = param;
        StringBuilder b14330 = new StringBuilder(a14330);
        b14330.append("" SafeStuff"");
        b14330.replace(b14330.length() - ""Chars"".length(), b14330.length(), ""Chars"");
        java.util.HashMap<String, Object> map14330 = new java.util.HashMap<String, Object>();
        map14330.put(""key14330"", b14330.toString());
        String c14330 = (String) map14330.get(""key14330"");
        String d14330 = c14330.substring(0, c14330.length() - 1);
        String e14330 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d14330.getBytes())));
        String f14330 = e14330.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g14330 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g14330);
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00190"")
public class BenchmarkTest00190 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00190"") != null) {
            param = request.getHeader(""BenchmarkTest00190"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String sql = ""{call "" + bar + ""}"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.CallableStatement statement = connection.prepareCall(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY);
            java.sql.ResultSet rs = statement.executeQuery();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00191"")
public class BenchmarkTest00191 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00191"") != null) {
            param = request.getHeader(""BenchmarkTest00191"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String sql = ""{call "" + bar + ""}"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.CallableStatement statement = connection.prepareCall(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY);
            java.sql.ResultSet rs = statement.executeQuery();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00197"")
public class BenchmarkTest00197 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00197"") != null) {
            param = request.getHeader(""BenchmarkTest00197"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.util.List<String> results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(sql, new org.springframework.jdbc.core.RowMapper<String>() {

                public String mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException {
                    try {
                        return rs.getString(""USERNAME"");
                    } catch (java.sql.SQLException e) {
                        if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                            return ""Error processing query."";
                        } else
                            throw e;
                    }
                }
            });
            response.getWriter().println(""Your results are: "");
            for (String s : results) {
                response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(s) + ""<br>"");
            }
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00200"")
public class BenchmarkTest00200 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00200"") != null) {
            param = request.getHeader(""BenchmarkTest00200"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring batchUpdate method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00201"")
public class BenchmarkTest00201 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00201"") != null) {
            param = request.getHeader(""BenchmarkTest00201"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a60073 = param;
        StringBuilder b60073 = new StringBuilder(a60073);
        b60073.append("" SafeStuff"");
        b60073.replace(b60073.length() - ""Chars"".length(), b60073.length(), ""Chars"");
        java.util.HashMap<String, Object> map60073 = new java.util.HashMap<String, Object>();
        map60073.put(""key60073"", b60073.toString());
        String c60073 = (String) map60073.get(""key60073"");
        String d60073 = c60073.substring(0, c60073.length() - 1);
        String e60073 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d60073.getBytes())));
        String f60073 = e60073.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g60073 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g60073);
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring batchUpdate method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00202"")
public class BenchmarkTest00202 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00202"") != null) {
            param = request.getHeader(""BenchmarkTest00202"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a15497 = param;
        StringBuilder b15497 = new StringBuilder(a15497);
        b15497.append("" SafeStuff"");
        b15497.replace(b15497.length() - ""Chars"".length(), b15497.length(), ""Chars"");
        java.util.HashMap<String, Object> map15497 = new java.util.HashMap<String, Object>();
        map15497.put(""key15497"", b15497.toString());
        String c15497 = (String) map15497.get(""key15497"");
        String d15497 = c15497.substring(0, c15497.length() - 1);
        String e15497 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d15497.getBytes())));
        String f15497 = e15497.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g15497 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g15497);
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new int[] { 1, 2 });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00205"")
public class BenchmarkTest00205 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00205"") != null) {
            param = request.getHeader(""BenchmarkTest00205"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new String[] { ""USERNAME"", ""PASSWORD"" });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00206"")
public class BenchmarkTest00206 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00206"") != null) {
            param = request.getHeader(""BenchmarkTest00206"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a13396 = param;
        StringBuilder b13396 = new StringBuilder(a13396);
        b13396.append("" SafeStuff"");
        b13396.replace(b13396.length() - ""Chars"".length(), b13396.length(), ""Chars"");
        java.util.HashMap<String, Object> map13396 = new java.util.HashMap<String, Object>();
        map13396.put(""key13396"", b13396.toString());
        String c13396 = (String) map13396.get(""key13396"");
        String d13396 = c13396.substring(0, c13396.length() - 1);
        String e13396 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d13396.getBytes())));
        String f13396 = e13396.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g13396 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g13396);
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new String[] { ""USERNAME"", ""PASSWORD"" });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00209"")
public class BenchmarkTest00209 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        StringBuilder sbxyz43235 = new StringBuilder(param);
        String bar = sbxyz43235.append(""_SafeStuff"").toString();
        try {
            javax.crypto.Cipher c = org.owasp.benchmark.helpers.Utils.getCipher();
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00211"")
public class BenchmarkTest00211 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DESEDE/ECB/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESEDE"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00212"")
public class BenchmarkTest00212 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DESEDE/ECB/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESEDE"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00213"")
public class BenchmarkTest00213 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00214"")
public class BenchmarkTest00214 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = param;
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg2"", ""AES/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DESede"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00217"")
public class BenchmarkTest00217 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String a26348 = param;
        StringBuilder b26348 = new StringBuilder(a26348);
        b26348.append("" SafeStuff"");
        b26348.replace(b26348.length() - ""Chars"".length(), b26348.length(), ""Chars"");
        java.util.HashMap<String, Object> map26348 = new java.util.HashMap<String, Object>();
        map26348.put(""key26348"", b26348.toString());
        String c26348 = (String) map26348.get(""key26348"");
        String d26348 = c26348.substring(0, c26348.length() - 1);
        String e26348 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d26348.getBytes())));
        String f26348 = e26348.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g26348 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g26348);
        java.io.File fileTarget = new java.io.File(bar, ""/Test.txt"");
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00220"")
public class BenchmarkTest00220 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String a25969 = param;
        StringBuilder b25969 = new StringBuilder(a25969);
        b25969.append("" SafeStuff"");
        b25969.replace(b25969.length() - ""Chars"".length(), b25969.length(), ""Chars"");
        java.util.HashMap<String, Object> map25969 = new java.util.HashMap<String, Object>();
        map25969.put(""key25969"", b25969.toString());
        String c25969 = (String) map25969.get(""key25969"");
        String d25969 = c25969.substring(0, c25969.length() - 1);
        String e25969 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d25969.getBytes())));
        String f25969 = e25969.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g25969 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g25969);
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName, false);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00221"")
public class BenchmarkTest00221 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName, false);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00224"")
public class BenchmarkTest00224 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = param;
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""sha-384"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""sha-384"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00225"")
public class BenchmarkTest00225 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-512"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00228"")
public class BenchmarkTest00228 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg2"", ""SHA5"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00229"")
public class BenchmarkTest00229 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg2"", ""SHA5"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00242"")
public class BenchmarkTest00242 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(true);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: true"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00243"")
public class BenchmarkTest00243 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map86025 = new java.util.HashMap<String, Object>();
        map86025.put(""keyA-86025"", ""a-Value"");
        map86025.put(""keyB-86025"", param);
        map86025.put(""keyC"", ""another-Value"");
        bar = (String) map86025.get(""keyB-86025"");
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            byte[] randomBytes = new byte[40];
            getNextNumber(numGen, randomBytes);
            String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);
            String user = ""SafeBystander"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextBytes() - TestCase"");
            throw new ServletException(e);
        } finally {
            response.getWriter().println(""Randomness Test java.security.SecureRandom.nextBytes(byte[]) executed"");
        }
    }

    void getNextNumber(java.util.Random generator, byte[] barray) {
        generator.nextBytes(barray);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00244"")
public class BenchmarkTest00244 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            byte[] randomBytes = new byte[40];
            getNextNumber(numGen, randomBytes);
            String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);
            String user = ""SafeBystander"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextBytes() - TestCase"");
            throw new ServletException(e);
        } finally {
            response.getWriter().println(""Randomness Test java.security.SecureRandom.nextBytes(byte[]) executed"");
        }
    }

    void getNextNumber(java.util.Random generator, byte[] barray) {
        generator.nextBytes(barray);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00245"")
public class BenchmarkTest00245 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String a73565 = param;
        StringBuilder b73565 = new StringBuilder(a73565);
        b73565.append("" SafeStuff"");
        b73565.replace(b73565.length() - ""Chars"".length(), b73565.length(), ""Chars"");
        java.util.HashMap<String, Object> map73565 = new java.util.HashMap<String, Object>();
        map73565.put(""key73565"", b73565.toString());
        String c73565 = (String) map73565.get(""key73565"");
        String d73565 = c73565.substring(0, c73565.length() - 1);
        String e73565 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d73565.getBytes())));
        String f73565 = e73565.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g73565 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g73565);
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            double rand = getNextNumber(numGen);
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonatella"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }

    double getNextNumber(java.util.Random generator) {
        return generator.nextDouble();
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00246"")
public class BenchmarkTest00246 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.security.SecureRandom secureRandomGenerator = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            byte[] randomBytes = new byte[40];
            secureRandomGenerator.nextBytes(randomBytes);
            String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);
            String user = ""SafeByron"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextBytes() - TestCase"");
            throw new ServletException(e);
        } finally {
            response.getWriter().println(""Randomness Test java.security.SecureRandom.nextBytes(byte[]) executed"");
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00247"")
public class BenchmarkTest00247 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = param;
        if (param != null && param.length() > 1) {
            StringBuilder sbxyz47256 = new StringBuilder(param);
            bar = sbxyz47256.replace(param.length() - ""Z"".length(), param.length(), ""Z"").toString();
        }
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00248"")
public class BenchmarkTest00248 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            long l = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextLong();
            String rememberMeKey = Long.toString(l);
            String user = ""SafeLogan"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextLong() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextLong() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00249"")
public class BenchmarkTest00249 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        try {
            long l = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextLong();
            String rememberMeKey = Long.toString(l);
            String user = ""SafeLogan"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextLong() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextLong() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00250"")
public class BenchmarkTest00250 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        request.getSession().putValue(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: 10340 saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00252"")
public class BenchmarkTest00252 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        request.getSession().setAttribute(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: '10340' saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00253"")
public class BenchmarkTest00253 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00255"")
public class BenchmarkTest00255 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00255"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(16);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""AES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00259"")
public class BenchmarkTest00259 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00259"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        try {
            javax.crypto.Cipher c = org.owasp.benchmark.helpers.Utils.getCipher();
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-00/BenchmarkTest00260"")
public class BenchmarkTest00260 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00260"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            javax.crypto.Cipher c = org.owasp.benchmark.helpers.Utils.getCipher();
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00261"")
public class BenchmarkTest00261 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00261"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a3000 = param;
        StringBuilder b3000 = new StringBuilder(a3000);
        b3000.append("" SafeStuff"");
        b3000.replace(b3000.length() - ""Chars"".length(), b3000.length(), ""Chars"");
        java.util.HashMap<String, Object> map3000 = new java.util.HashMap<String, Object>();
        map3000.put(""key3000"", b3000.toString());
        String c3000 = (String) map3000.get(""key3000"");
        String d3000 = c3000.substring(0, c3000.length() - 1);
        String e3000 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d3000.getBytes())));
        String f3000 = e3000.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g3000 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g3000);
        java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00263"")
public class BenchmarkTest00263 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00263"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting FileInputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00265"")
public class BenchmarkTest00265 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00265"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00270"")
public class BenchmarkTest00270 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00270"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-512"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00271"")
public class BenchmarkTest00271 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00271"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a75009 = param;
        StringBuilder b75009 = new StringBuilder(a75009);
        b75009.append("" SafeStuff"");
        b75009.replace(b75009.length() - ""Chars"".length(), b75009.length(), ""Chars"");
        java.util.HashMap<String, Object> map75009 = new java.util.HashMap<String, Object>();
        map75009.put(""key75009"", b75009.toString());
        String c75009 = (String) map75009.get(""key75009"");
        String d75009 = c75009.substring(0, c75009.length() - 1);
        String e75009 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d75009.getBytes())));
        String f75009 = e75009.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f75009);
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-512"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00275"")
public class BenchmarkTest00275 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a28150 = param;
        StringBuilder b28150 = new StringBuilder(a28150);
        b28150.append("" SafeStuff"");
        b28150.replace(b28150.length() - ""Chars"".length(), b28150.length(), ""Chars"");
        java.util.HashMap<String, Object> map28150 = new java.util.HashMap<String, Object>();
        map28150.put(""key28150"", b28150.toString());
        String c28150 = (String) map28150.get(""key28150"");
        String d28150 = c28150.substring(0, c28150.length() - 1);
        String e28150 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d28150.getBytes())));
        String f28150 = e28150.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g28150 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g28150);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar.toCharArray());
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00277"")
public class BenchmarkTest00277 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a54571 = param;
        StringBuilder b54571 = new StringBuilder(a54571);
        b54571.append("" SafeStuff"");
        b54571.replace(b54571.length() - ""Chars"".length(), b54571.length(), ""Chars"");
        java.util.HashMap<String, Object> map54571 = new java.util.HashMap<String, Object>();
        map54571.put(""key54571"", b54571.toString());
        String c54571 = (String) map54571.get(""key54571"");
        String d54571 = c54571.substring(0, c54571.length() - 1);
        String e54571 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d54571.getBytes())));
        String f54571 = e54571.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g54571 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g54571);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00278"")
public class BenchmarkTest00278 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00281"")
public class BenchmarkTest00281 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().printf(java.util.Locale.US, bar, obj);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00282"")
public class BenchmarkTest00282 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { bar, ""b"" };
        response.getWriter().printf(""Formatted like: %1$s and %2$s."", obj);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00283"")
public class BenchmarkTest00283 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar.toCharArray());
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00285"")
public class BenchmarkTest00285 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00286"")
public class BenchmarkTest00286 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().write(bar.toCharArray());
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00288"")
public class BenchmarkTest00288 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map34285 = new java.util.HashMap<String, Object>();
        map34285.put(""keyA-34285"", ""a_Value"");
        map34285.put(""keyB-34285"", param);
        map34285.put(""keyC"", ""another_Value"");
        bar = (String) map34285.get(""keyB-34285"");
        bar = (String) map34285.get(""keyA-34285"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        int length = 1;
        if (bar != null) {
            length = bar.length();
            response.getWriter().write(bar.toCharArray(), 0, length);
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00289"")
public class BenchmarkTest00289 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().write(bar);
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00305"")
public class BenchmarkTest00305 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00305"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a99928 = param;
        StringBuilder b99928 = new StringBuilder(a99928);
        b99928.append("" SafeStuff"");
        b99928.replace(b99928.length() - ""Chars"".length(), b99928.length(), ""Chars"");
        java.util.HashMap<String, Object> map99928 = new java.util.HashMap<String, Object>();
        map99928.put(""key99928"", b99928.toString());
        String c99928 = (String) map99928.get(""key99928"");
        String d99928 = c99928.substring(0, c99928.length() - 1);
        String e99928 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d99928.getBytes())));
        String f99928 = e99928.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g99928 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g99928);
        String cmd = """";
        String a1 = """";
        String a2 = """";
        String[] args = null;
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            a1 = ""cmd.exe"";
            a2 = ""/c"";
            cmd = ""echo "";
            args = new String[] { a1, a2, cmd, bar };
        } else {
            a1 = ""sh"";
            a2 = ""-c"";
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""ls "");
            args = new String[] { a1, a2, cmd + bar };
        }
        String[] argsEnv = { ""foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00307"")
public class BenchmarkTest00307 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00307"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00308"")
public class BenchmarkTest00308 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00308"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00309"")
public class BenchmarkTest00309 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00309"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map92785 = new java.util.HashMap<String, Object>();
        map92785.put(""keyA-92785"", ""a_Value"");
        map92785.put(""keyB-92785"", param);
        map92785.put(""keyC"", ""another_Value"");
        bar = (String) map92785.get(""keyB-92785"");
        bar = (String) map92785.get(""keyA-92785"");
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00310"")
public class BenchmarkTest00310 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00310"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00312"")
public class BenchmarkTest00312 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00312"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00313"")
public class BenchmarkTest00313 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00313"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            double rand = getNextNumber(numGen);
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonatella"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }

    double getNextNumber(java.util.Random generator) {
        return generator.nextDouble();
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00314"")
public class BenchmarkTest00314 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00314"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        try {
            java.util.Random numGen = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            double rand = getNextNumber(numGen);
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonatella"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }

    double getNextNumber(java.util.Random generator) {
        return generator.nextDouble();
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00315"")
public class BenchmarkTest00315 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00315"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map38775 = new java.util.HashMap<String, Object>();
        map38775.put(""keyA-38775"", ""a_Value"");
        map38775.put(""keyB-38775"", param);
        map38775.put(""keyC"", ""another_Value"");
        bar = (String) map38775.get(""keyB-38775"");
        bar = (String) map38775.get(""keyA-38775"");
        try {
            java.security.SecureRandom secureRandomGenerator = java.security.SecureRandom.getInstance(""SHA1PRNG"");
            byte[] randomBytes = new byte[40];
            secureRandomGenerator.nextBytes(randomBytes);
            String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(randomBytes, true);
            String user = ""SafeByron"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextBytes() - TestCase"");
            throw new ServletException(e);
        } finally {
            response.getWriter().println(""Randomness Test java.security.SecureRandom.nextBytes(byte[]) executed"");
        }
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00316"")
public class BenchmarkTest00316 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00316"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a78780 = param;
        StringBuilder b78780 = new StringBuilder(a78780);
        b78780.append("" SafeStuff"");
        b78780.replace(b78780.length() - ""Chars"".length(), b78780.length(), ""Chars"");
        java.util.HashMap<String, Object> map78780 = new java.util.HashMap<String, Object>();
        map78780.put(""key78780"", b78780.toString());
        String c78780 = (String) map78780.get(""key78780"");
        String d78780 = c78780.substring(0, c78780.length() - 1);
        String e78780 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d78780.getBytes())));
        String f78780 = e78780.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f78780);
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00317"")
public class BenchmarkTest00317 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00317"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        try {
            double rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextDouble();
            String rememberMeKey = Double.toString(rand).substring(2);
            String user = ""SafeDonna"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextDouble() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextDouble() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00318"")
public class BenchmarkTest00318 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00318"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a30925 = param;
        StringBuilder b30925 = new StringBuilder(a30925);
        b30925.append("" SafeStuff"");
        b30925.replace(b30925.length() - ""Chars"".length(), b30925.length(), ""Chars"");
        java.util.HashMap<String, Object> map30925 = new java.util.HashMap<String, Object>();
        map30925.put(""key30925"", b30925.toString());
        String c30925 = (String) map30925.get(""key30925"");
        String d30925 = c30925.substring(0, c30925.length() - 1);
        String e30925 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d30925.getBytes())));
        String f30925 = e30925.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g30925 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g30925);
        try {
            float rand = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextFloat();
            String rememberMeKey = Float.toString(rand).substring(2);
            String user = ""SafeFloyd"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextFloat() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextFloat() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00319"")
public class BenchmarkTest00319 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00319"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        try {
            int r = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextInt();
            String rememberMeKey = Integer.toString(r);
            String user = ""SafeIngrid"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextInt() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextInt() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00320"")
public class BenchmarkTest00320 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00320"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            long l = java.security.SecureRandom.getInstance(""SHA1PRNG"").nextLong();
            String rememberMeKey = Long.toString(l);
            String user = ""SafeLogan"";
            String fullClassName = this.getClass().getName();
            String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
            user += testCaseNumber;
            String cookieName = ""rememberMe"" + testCaseNumber;
            boolean foundUser = false;
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (int i = 0; !foundUser && i < cookies.length; i++) {
                    javax.servlet.http.Cookie cookie = cookies[i];
                    if (cookieName.equals(cookie.getName())) {
                        if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                            foundUser = true;
                        }
                    }
                }
            }
            if (foundUser) {
                response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
            } else {
                javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
                rememberMe.setSecure(true);
                rememberMe.setPath(request.getRequestURI());
                request.getSession().setAttribute(cookieName, rememberMeKey);
                response.addCookie(rememberMe);
                response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
            }
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing SecureRandom.nextLong() - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Weak Randomness Test java.security.SecureRandom.nextLong() executed"");
    }
}
",NoCWE
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00012"")
public class BenchmarkTest00012 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00012"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person))(|(uid="" + param + "")(street={0}))"";
            Object[] filters = new Object[] { ""The streetz 4 Ms bar"" };
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            javax.naming.directory.InitialDirContext idc = (javax.naming.directory.InitialDirContext) ctx;
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = idc.search(base, filter, filters, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",CWE90
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00021"")
public class BenchmarkTest00021 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00021"");
        if (param == null)
            param = """";
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person))(|(uid="" + param + "")(street={0}))"";
            Object[] filters = new Object[] { ""The streetz 4 Ms bar"" };
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = ctx.search(base, filter, filters, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",CWE90
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00044"")
public class BenchmarkTest00044 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00044"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person)(uid="" + param + ""))"";
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = ctx.search(base, filter, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",CWE90
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00630"")
public class BenchmarkTest00630 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00630"");
        if (param == null)
            param = """";
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person)(uid="" + bar + ""))"";
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            javax.naming.directory.InitialDirContext idc = (javax.naming.directory.InitialDirContext) ctx;
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = idc.search(base, filter, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",CWE90
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/ldapi-00/BenchmarkTest00694"")
public class BenchmarkTest00694 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00694"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        String bar = param;
        org.owasp.benchmark.helpers.LDAPManager ads = new org.owasp.benchmark.helpers.LDAPManager();
        try {
            response.setContentType(""text/html"");
            javax.naming.directory.DirContext ctx = ads.getDirContext();
            String base = ""ou=users,ou=system"";
            javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();
            sc.setSearchScope(javax.naming.directory.SearchControls.SUBTREE_SCOPE);
            String filter = ""(&(objectclass=person)(uid="" + bar + ""))"";
            javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> results = ctx.search(base, filter, sc);
            while (results.hasMore()) {
                javax.naming.directory.SearchResult sr = (javax.naming.directory.SearchResult) results.next();
                javax.naming.directory.Attributes attrs = sr.getAttributes();
                javax.naming.directory.Attribute attr = attrs.get(""uid"");
                javax.naming.directory.Attribute attr2 = attrs.get(""street"");
                if (attr != null) {
                    response.getWriter().println(""LDAP query results:<br>"" + "" Record found with name "" + attr.get() + ""<br>"" + ""Address: "" + attr2.get() + ""<br>"");
                } else
                    response.getWriter().println(""LDAP query results: nothing found."");
            }
        } catch (javax.naming.NamingException e) {
            throw new ServletException(e);
        } finally {
            try {
                ads.closeDirContext();
            } catch (Exception e) {
                throw new ServletException(e);
            }
        }
    }
}
",CWE90
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00008"")
public class BenchmarkTest00008 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00008"") != null) {
            param = request.getHeader(""BenchmarkTest00008"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String sql = ""{call "" + param + ""}"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.CallableStatement statement = connection.prepareCall(sql);
            java.sql.ResultSet rs = statement.executeQuery();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00018"")
public class BenchmarkTest00018 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00018"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql);
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00024"")
public class BenchmarkTest00024 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00024"");
        if (param == null)
            param = """";
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + param + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00025"")
public class BenchmarkTest00025 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00025"");
        if (param == null)
            param = """";
        String sql = ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            Long results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql);
            response.getWriter().println(""Your results are: "");
            response.getWriter().println(results.toString());
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00026"")
public class BenchmarkTest00026 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00026"");
        if (param == null)
            param = """";
        String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            org.springframework.jdbc.support.rowset.SqlRowSet results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
            response.getWriter().println(""Your results are: "");
            while (results.next()) {
                response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.getString(""USERNAME"")) + "" "");
            }
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00027"")
public class BenchmarkTest00027 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00027"");
        if (param == null)
            param = """";
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql);
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00032"")
public class BenchmarkTest00032 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00032"");
            if (values != null)
                param = values[0];
        }
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring execute method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00033"")
public class BenchmarkTest00033 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00033"");
            if (values != null)
                param = values[0];
        }
        String sql = ""SELECT  * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            org.springframework.jdbc.support.rowset.SqlRowSet results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);
            response.getWriter().println(""Your results are: "");
            while (results.next()) {
                response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.getString(""USERNAME"")) + "" "");
            }
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00034"")
public class BenchmarkTest00034 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00034"");
            if (values != null)
                param = values[0];
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00037"")
public class BenchmarkTest00037 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00037"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + param + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00038"")
public class BenchmarkTest00038 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00038"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            java.util.List<String> results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(sql, new org.springframework.jdbc.core.RowMapper<String>() {

                public String mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException {
                    try {
                        return rs.getString(""USERNAME"");
                    } catch (java.sql.SQLException e) {
                        if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                            return ""Error processing query."";
                        } else
                            throw e;
                    }
                }
            });
            response.getWriter().println(""Your results are: "");
            for (String s : results) {
                response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(s) + ""<br>"");
            }
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00039"")
public class BenchmarkTest00039 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00039"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String sql = ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + param + ""'"";
        try {
            java.util.Map results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
            response.getWriter().println(""Your results are: "");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00043"")
public class BenchmarkTest00043 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00043"");
        if (param == null)
            param = """";
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + param + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new int[] { 1, 2 });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00100"")
public class BenchmarkTest00100 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00100"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00100.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00100"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map72344 = new java.util.HashMap<String, Object>();
        map72344.put(""keyA-72344"", ""a-Value"");
        map72344.put(""keyB-72344"", param);
        map72344.put(""keyC"", ""another-Value"");
        bar = (String) map72344.get(""keyB-72344"");
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00101"")
public class BenchmarkTest00101 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00101"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00101.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00101"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql, new String[] { ""Column1"", ""Column2"" });
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00102"")
public class BenchmarkTest00102 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00102"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00102.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00102"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        String sql = ""SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.util.Map results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);
            response.getWriter().println(""Your results are: "");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00103"")
public class BenchmarkTest00103 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00103"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00103.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00103"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        String sql = ""SELECT TOP 1 USERNAME from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            Object results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(sql, new Object[] {}, String.class);
            response.getWriter().println(""Your results are: "");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()));
        } catch (org.springframework.dao.EmptyResultDataAccessException e) {
            response.getWriter().println(""No results returned for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00106"")
public class BenchmarkTest00106 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00106"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00106.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00106"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00108"")
public class BenchmarkTest00108 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00108"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00108.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00108"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, new int[] { 1, 2 });
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00109"")
public class BenchmarkTest00109 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00109"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00109.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00109"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            statement.execute(sql, new String[] { ""username"", ""password"" });
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00111"")
public class BenchmarkTest00111 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00111"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00111.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00111"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql);
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00112"")
public class BenchmarkTest00112 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00112"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00112.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00112"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql);
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00115"")
public class BenchmarkTest00115 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00115"", ""bar"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/sqli-00/BenchmarkTest00115.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00115"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map11928 = new java.util.HashMap<String, Object>();
        map11928.put(""keyA-11928"", ""a-Value"");
        map11928.put(""keyB-11928"", param);
        map11928.put(""keyC"", ""another-Value"");
        bar = (String) map11928.get(""keyB-11928"");
        String sql = ""INSERT INTO users (username, password) VALUES ('foo','"" + bar + ""')"";
        try {
            java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();
            int count = statement.executeUpdate(sql, new String[] { ""USERNAME"", ""PASSWORD"" });
            org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00192"")
public class BenchmarkTest00192 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00192"") != null) {
            param = request.getHeader(""BenchmarkTest00192"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00193"")
public class BenchmarkTest00193 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00193"") != null) {
            param = request.getHeader(""BenchmarkTest00193"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        String sql = ""SELECT * from USERS where USERNAME=? and PASSWORD='"" + bar + ""'"";
        try {
            java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
            java.sql.PreparedStatement statement = connection.prepareStatement(sql, new String[] { ""Column1"", ""Column2"" });
            statement.setString(1, ""foo"");
            statement.execute();
            org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response);
        } catch (java.sql.SQLException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
                return;
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00194"")
public class BenchmarkTest00194 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00194"") != null) {
            param = request.getHeader(""BenchmarkTest00194"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring batchUpdate method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/sqli-00/BenchmarkTest00195"")
public class BenchmarkTest00195 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00195"") != null) {
            param = request.getHeader(""BenchmarkTest00195"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            String sql = ""SELECT * from USERS where USERNAME='foo' and PASSWORD='"" + bar + ""'"";
            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);
            response.getWriter().println(""No results can be displayed for query: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + ""<br>"" + "" because the Spring execute method doesn't return results."");
        } catch (org.springframework.dao.DataAccessException e) {
            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
                response.getWriter().println(""Error processing request."");
            } else
                throw new ServletException(e);
        }
    }
}
",CWE89
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00013"")
public class BenchmarkTest00013 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(java.util.Locale.US, param, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00014"")
public class BenchmarkTest00014 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(param, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00030"")
public class BenchmarkTest00030 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00030"");
            if (values != null)
                param = values[0];
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().printf(param, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00036"")
public class BenchmarkTest00036 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00036"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        int length = 1;
        if (param != null) {
            length = param.length();
            response.getWriter().write(param.toCharArray(), 0, length);
        }
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00041"")
public class BenchmarkTest00041 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00041"");
        if (param == null)
            param = """";
        response.setHeader(""X-XSS-Protection"", ""0"");
        int length = 1;
        if (param != null) {
            length = param.length();
            response.getWriter().write(param, 0, length);
        }
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00047"")
public class BenchmarkTest00047 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String queryString = request.getQueryString();
        String paramval = ""BenchmarkTest00047"" + ""="";
        int paramLoc = -1;
        if (queryString != null)
            paramLoc = queryString.indexOf(paramval);
        if (paramLoc == -1) {
            response.getWriter().println(""getQueryString() couldn't find expected parameter '"" + ""BenchmarkTest00047"" + ""' in query string."");
            return;
        }
        String param = queryString.substring(paramLoc + paramval.length());
        int ampersandLoc = queryString.indexOf(""&"", paramLoc);
        if (ampersandLoc != -1) {
            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(param, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00048"")
public class BenchmarkTest00048 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String queryString = request.getQueryString();
        String paramval = ""BenchmarkTest00048"" + ""="";
        int paramLoc = -1;
        if (queryString != null)
            paramLoc = queryString.indexOf(paramval);
        if (paramLoc == -1) {
            response.getWriter().println(""getQueryString() couldn't find expected parameter '"" + ""BenchmarkTest00048"" + ""' in query string."");
            return;
        }
        String param = queryString.substring(paramLoc + paramval.length());
        int ampersandLoc = queryString.indexOf(""&"", paramLoc);
        if (ampersandLoc != -1) {
            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(param.toCharArray());
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00049"")
public class BenchmarkTest00049 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String queryString = request.getQueryString();
        String paramval = ""BenchmarkTest00049"" + ""="";
        int paramLoc = -1;
        if (queryString != null)
            paramLoc = queryString.indexOf(paramval);
        if (paramLoc == -1) {
            response.getWriter().println(""getQueryString() couldn't find expected parameter '"" + ""BenchmarkTest00049"" + ""' in query string."");
            return;
        }
        String param = queryString.substring(paramLoc + paramval.length());
        int ampersandLoc = queryString.indexOf(""&"", paramLoc);
        if (ampersandLoc != -1) {
            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().write(""Parameter value: "" + param);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00144"")
public class BenchmarkTest00144 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(java.util.Locale.US, bar, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00145"")
public class BenchmarkTest00145 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map17589 = new java.util.HashMap<String, Object>();
        map17589.put(""keyA-17589"", ""a-Value"");
        map17589.put(""keyB-17589"", param);
        map17589.put(""keyC"", ""another-Value"");
        bar = (String) map17589.get(""keyB-17589"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(java.util.Locale.US, bar, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00146"")
public class BenchmarkTest00146 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        if (param != null && param.length() > 1) {
            StringBuilder sbxyz67327 = new StringBuilder(param);
            bar = sbxyz67327.replace(param.length() - ""Z"".length(), param.length(), ""Z"").toString();
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", ""b"" };
        response.getWriter().format(java.util.Locale.US, bar, obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00148"")
public class BenchmarkTest00148 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", bar };
        response.getWriter().format(""Formatted like: %1$s and %2$s."", obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00149"")
public class BenchmarkTest00149 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        StringBuilder sbxyz19132 = new StringBuilder(param);
        String bar = sbxyz19132.append(""_SafeStuff"").toString();
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", bar };
        response.getWriter().printf(java.util.Locale.US, ""Formatted like: %1$s and %2$s."", obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00150"")
public class BenchmarkTest00150 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        response.setHeader(""X-XSS-Protection"", ""0"");
        Object[] obj = { ""a"", bar };
        response.getWriter().printf(java.util.Locale.US, ""Formatted like: %1$s and %2$s."", obj);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00152"")
public class BenchmarkTest00152 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar.toCharArray());
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00153"")
public class BenchmarkTest00153 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map96050 = new java.util.HashMap<String, Object>();
        map96050.put(""keyA-96050"", ""a-Value"");
        map96050.put(""keyB-96050"", param);
        map96050.put(""keyC"", ""another-Value"");
        bar = (String) map96050.get(""keyB-96050"");
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00154"")
public class BenchmarkTest00154 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00155"")
public class BenchmarkTest00155 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00156"")
public class BenchmarkTest00156 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().write(bar.toCharArray());
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00157"")
public class BenchmarkTest00157 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""Referer"") != null) {
            param = request.getHeader(""Referer"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().write(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00276"")
public class BenchmarkTest00276 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00279"")
public class BenchmarkTest00279 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00280"")
public class BenchmarkTest00280 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().print(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xss-00/BenchmarkTest00284"")
public class BenchmarkTest00284 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""Referer"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        response.setHeader(""X-XSS-Protection"", ""0"");
        response.getWriter().println(bar);
    }
}
",CWE79
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00006"")
public class BenchmarkTest00006 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00006"") != null) {
            param = request.getHeader(""BenchmarkTest00006"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        java.util.List<String> argList = new java.util.ArrayList<String>();
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            argList.add(""cmd.exe"");
            argList.add(""/c"");
        } else {
            argList.add(""sh"");
            argList.add(""-c"");
        }
        argList.add(""echo "" + param);
        ProcessBuilder pb = new ProcessBuilder();
        pb.command(argList);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.util.List) Test Case"");
            throw new ServletException(e);
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00007"")
public class BenchmarkTest00007 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00007"") != null) {
            param = request.getHeader(""BenchmarkTest00007"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] args = { cmd };
        String[] argsEnv = { param };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00015"")
public class BenchmarkTest00015 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00015"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        java.util.List<String> argList = new java.util.ArrayList<String>();
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            argList.add(""cmd.exe"");
            argList.add(""/c"");
        } else {
            argList.add(""sh"");
            argList.add(""-c"");
        }
        argList.add(""echo "" + param);
        ProcessBuilder pb = new ProcessBuilder();
        pb.command(argList);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.util.List) Test Case"");
            throw new ServletException(e);
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00017"")
public class BenchmarkTest00017 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00017"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + param);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00077"")
public class BenchmarkTest00077 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00077"", ""ECHOOO"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/cmdi-00/BenchmarkTest00077.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00077"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        java.util.List<String> argList = new java.util.ArrayList<String>();
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            argList.add(""cmd.exe"");
            argList.add(""/c"");
        } else {
            argList.add(""sh"");
            argList.add(""-c"");
        }
        argList.add(""echo "" + bar);
        ProcessBuilder pb = new ProcessBuilder(argList);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.util.List) Test Case"");
            throw new ServletException(e);
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00091"")
public class BenchmarkTest00091 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00091"", ""FOO%3Decho+Injection"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/cmdi-00/BenchmarkTest00091.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00091"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = param;
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] args = { cmd };
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00092"")
public class BenchmarkTest00092 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00092"", ""FOO%3Decho+Injection"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/cmdi-00/BenchmarkTest00092.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00092"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] args = { cmd };
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00159"")
public class BenchmarkTest00159 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00159"") != null) {
            param = request.getHeader(""BenchmarkTest00159"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        String a1 = """";
        String a2 = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            a1 = ""cmd.exe"";
            a2 = ""/c"";
        } else {
            a1 = ""sh"";
            a2 = ""-c"";
        }
        String[] args = { a1, a2, ""echo "" + bar };
        ProcessBuilder pb = new ProcessBuilder(args);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.lang.String[]) Test Case"");
            throw new ServletException(e);
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00172"")
public class BenchmarkTest00172 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00172"") != null) {
            param = request.getHeader(""BenchmarkTest00172"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map59408 = new java.util.HashMap<String, Object>();
        map59408.put(""keyA-59408"", ""a-Value"");
        map59408.put(""keyB-59408"", param);
        map59408.put(""keyC"", ""another-Value"");
        bar = (String) map59408.get(""keyB-59408"");
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] args = { cmd };
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00173"")
public class BenchmarkTest00173 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00173"") != null) {
            param = request.getHeader(""BenchmarkTest00173"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map68097 = new java.util.HashMap<String, Object>();
        map68097.put(""keyA-68097"", ""a-Value"");
        map68097.put(""keyB-68097"", param);
        map68097.put(""keyC"", ""another-Value"");
        bar = (String) map68097.get(""keyB-68097"");
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00174"")
public class BenchmarkTest00174 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00174"") != null) {
            param = request.getHeader(""BenchmarkTest00174"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        String cmd = org.owasp.benchmark.helpers.Utils.getInsecureOSCommandString(this.getClass().getClassLoader());
        String[] argsEnv = { bar };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd, argsEnv);
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00176"")
public class BenchmarkTest00176 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00176"") != null) {
            param = request.getHeader(""BenchmarkTest00176"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        String cmd = """";
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            cmd = org.owasp.benchmark.helpers.Utils.getOSCommandString(""echo"");
        }
        String[] argsEnv = { ""Foo=bar"" };
        Runtime r = Runtime.getRuntime();
        try {
            Process p = r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(""user.dir"")));
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - TestCase"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
            return;
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/cmdi-00/BenchmarkTest00293"")
public class BenchmarkTest00293 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00293"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        java.util.List<String> argList = new java.util.ArrayList<String>();
        String osName = System.getProperty(""os.name"");
        if (osName.indexOf(""Windows"") != -1) {
            argList.add(""cmd.exe"");
            argList.add(""/c"");
        } else {
            argList.add(""sh"");
            argList.add(""-c"");
        }
        argList.add(""echo "" + bar);
        ProcessBuilder pb = new ProcessBuilder();
        pb.command(argList);
        try {
            Process p = pb.start();
            org.owasp.benchmark.helpers.Utils.printOSCommandResults(p, response);
        } catch (IOException e) {
            System.out.println(""Problem executing cmdi - java.lang.ProcessBuilder(java.util.List) Test Case"");
            throw new ServletException(e);
        }
    }
}
",CWE78
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest01223"")
public class BenchmarkTest01223 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest01223"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = new Test().doSomething(request, param);
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(""Your query results are: <br/>"");
            org.w3c.dom.NodeList nodeList = (org.w3c.dom.NodeList) xp.compile(expression).evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);
            for (int i = 0; i < nodeList.getLength(); i++) {
                org.w3c.dom.Element value = (org.w3c.dom.Element) nodeList.item(i);
                response.getWriter().println(value.getTextContent() + ""<br/>"");
            }
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }

    private class Test {

        public String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
            String bar;
            String guess = ""ABC"";
            char switchTarget = guess.charAt(2);
            switch(switchTarget) {
                case 'A':
                    bar = param;
                    break;
                case 'B':
                    bar = ""bobs_your_uncle"";
                    break;
                case 'C':
                case 'D':
                    bar = param;
                    break;
                default:
                    bar = ""bobs_your_uncle"";
                    break;
            }
            return bar;
        }
    }
}
",CWE643
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest01224"")
public class BenchmarkTest01224 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest01224"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = new Test().doSomething(request, param);
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            response.getWriter().println(""Your query results are: <br/>"");
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(xp.evaluate(expression, xmlDocument) + ""<br/>"");
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }

    private class Test {

        public String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
            String bar = """";
            if (param != null) {
                java.util.List<String> valuesList = new java.util.ArrayList<String>();
                valuesList.add(""safe"");
                valuesList.add(param);
                valuesList.add(""moresafe"");
                valuesList.remove(0);
                bar = valuesList.get(0);
            }
            return bar;
        }
    }
}
",CWE643
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/xpathi-00/BenchmarkTest01316"")
public class BenchmarkTest01316 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest01316"");
        if (param == null)
            param = """";
        String bar = new Test().doSomething(request, param);
        try {
            java.io.FileInputStream file = new java.io.FileInputStream(org.owasp.benchmark.helpers.Utils.getFileFromClasspath(""employees.xml"", this.getClass().getClassLoader()));
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            builderFactory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true);
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document xmlDocument = builder.parse(file);
            javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
            javax.xml.xpath.XPath xp = xpf.newXPath();
            response.getWriter().println(""Your query results are: <br/>"");
            String expression = ""/Employees/Employee[@emplid='"" + bar + ""']"";
            response.getWriter().println(xp.evaluate(expression, xmlDocument) + ""<br/>"");
        } catch (javax.xml.xpath.XPathExpressionException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (javax.xml.parsers.ParserConfigurationException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        } catch (org.xml.sax.SAXException e) {
            System.out.println(""XPath expression exception caught and swallowed: "" + e.getMessage());
        }
    }

    private class Test {

        public String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
            String bar;
            int num = 196;
            if ((500 / 42) + num > 200)
                bar = param;
            else
                bar = ""This should never happen"";
            return bar;
        }
    }
}
",CWE643
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00087"")
public class BenchmarkTest00087 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00087"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/securecookie-00/BenchmarkTest00087.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00087"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00169"")
public class BenchmarkTest00169 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00169"") != null) {
            param = request.getHeader(""BenchmarkTest00169"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00170"")
public class BenchmarkTest00170 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00170"") != null) {
            param = request.getHeader(""BenchmarkTest00170"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String a9823 = param;
        StringBuilder b9823 = new StringBuilder(a9823);
        b9823.append("" SafeStuff"");
        b9823.replace(b9823.length() - ""Chars"".length(), b9823.length(), ""Chars"");
        java.util.HashMap<String, Object> map9823 = new java.util.HashMap<String, Object>();
        map9823.put(""key9823"", b9823.toString());
        String c9823 = (String) map9823.get(""key9823"");
        String d9823 = c9823.substring(0, c9823.length() - 1);
        String e9823 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d9823.getBytes())));
        String f9823 = e9823.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g9823 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g9823);
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00241"")
public class BenchmarkTest00241 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00300"")
public class BenchmarkTest00300 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00300"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/securecookie-00/BenchmarkTest00348"")
public class BenchmarkTest00348 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.io.InputStream param = request.getInputStream();
        java.io.InputStream bar = param;
        byte[] input = new byte[1000];
        String str = ""?"";
        Object inputParam = param;
        if (inputParam instanceof String)
            str = ((String) inputParam);
        if (inputParam instanceof java.io.InputStream) {
            int i = ((java.io.InputStream) inputParam).read(input);
            if (i == -1) {
                response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                return;
            }
            str = new String(input, 0, i);
        }
        if ("""".equals(str))
            str = ""No cookie value supplied"";
        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(""SomeCookie"", str);
        cookie.setSecure(false);
        cookie.setPath(request.getRequestURI());
        response.addCookie(cookie);
        response.getWriter().println(""Created cookie: 'SomeCookie': with value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(str) + ""' and secure flag set to: false"");
    }
}
",CWE614
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00004"")
public class BenchmarkTest00004 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00004"", ""color"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/trustbound-00/BenchmarkTest00004.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00004"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        request.getSession().setAttribute(param, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(param) + ""' with value: '10340' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00031"")
public class BenchmarkTest00031 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00031"");
            if (values != null)
                param = values[0];
        }
        request.getSession().putValue(""userid"", param);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(param) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00098"")
public class BenchmarkTest00098 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00098"", ""my_user_id"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/trustbound-00/BenchmarkTest00098.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00098"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00251"")
public class BenchmarkTest00251 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = """";
        if (param != null)
            bar = param.split("" "")[0];
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00321"")
public class BenchmarkTest00321 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00321"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        request.getSession().putValue(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: 10340 saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00324"")
public class BenchmarkTest00324 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00324"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00325"")
public class BenchmarkTest00325 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00325"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00326"")
public class BenchmarkTest00326 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00326"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        request.getSession().setAttribute(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: '10340' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00327"")
public class BenchmarkTest00327 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00327"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00424"")
public class BenchmarkTest00424 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00424"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00425"")
public class BenchmarkTest00425 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00425"");
        if (param == null)
            param = """";
        StringBuilder sbxyz2192 = new StringBuilder(param);
        String bar = sbxyz2192.append(""_SafeStuff"").toString();
        request.getSession().putValue(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00426"")
public class BenchmarkTest00426 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00426"");
        if (param == null)
            param = """";
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        request.getSession().setAttribute(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: '10340' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00427"")
public class BenchmarkTest00427 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00427"");
        if (param == null)
            param = """";
        String a70670 = param;
        StringBuilder b70670 = new StringBuilder(a70670);
        b70670.append("" SafeStuff"");
        b70670.replace(b70670.length() - ""Chars"".length(), b70670.length(), ""Chars"");
        java.util.HashMap<String, Object> map70670 = new java.util.HashMap<String, Object>();
        map70670.put(""key70670"", b70670.toString());
        String c70670 = (String) map70670.get(""key70670"");
        String d70670 = c70670.substring(0, c70670.length() - 1);
        String e70670 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d70670.getBytes())));
        String f70670 = e70670.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f70670);
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00508"")
public class BenchmarkTest00508 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00508"");
            if (values != null)
                param = values[0];
        }
        StringBuilder sbxyz10446 = new StringBuilder(param);
        String bar = sbxyz10446.append(""_SafeStuff"").toString();
        request.getSession().setAttribute(""userid"", bar);
        response.getWriter().println(""Item: 'userid' with value: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00587"")
public class BenchmarkTest00587 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00587"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map44465 = new java.util.HashMap<String, Object>();
        map44465.put(""keyA-44465"", ""a-Value"");
        map44465.put(""keyB-44465"", param);
        map44465.put(""keyC"", ""another-Value"");
        bar = (String) map44465.get(""keyB-44465"");
        request.getSession().setAttribute(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: '10340' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00588"")
public class BenchmarkTest00588 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00588"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        request.getSession().setAttribute(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: '10340' saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/trustbound-00/BenchmarkTest00668"")
public class BenchmarkTest00668 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00668"");
        if (param == null)
            param = """";
        String bar = org.owasp.esapi.ESAPI.encoder().encodeForHTML(param);
        request.getSession().putValue(bar, ""10340"");
        response.getWriter().println(""Item: '"" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar) + ""' with value: 10340 saved in session."");
    }
}
",CWE501
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00023"")
public class BenchmarkTest00023 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00023"");
        if (param == null)
            param = """";
        float rand = new java.util.Random().nextFloat();
        String rememberMeKey = Float.toString(rand).substring(2);
        String user = ""Floyd"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextFloat() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00066"")
public class BenchmarkTest00066 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00066"", ""anything"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00066.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00066"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00067"")
public class BenchmarkTest00067 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00067"", ""anything"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00067.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00067"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String a71153 = param;
        StringBuilder b71153 = new StringBuilder(a71153);
        b71153.append("" SafeStuff"");
        b71153.replace(b71153.length() - ""Chars"".length(), b71153.length(), ""Chars"");
        java.util.HashMap<String, Object> map71153 = new java.util.HashMap<String, Object>();
        map71153.put(""key71153"", b71153.toString());
        String c71153 = (String) map71153.get(""key71153"");
        String d71153 = c71153.substring(0, c71153.length() - 1);
        String e71153 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d71153.getBytes())));
        String f71153 = e71153.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g71153 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g71153);
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00068"")
public class BenchmarkTest00068 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00068"", ""anything"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00068.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00068"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00078"")
public class BenchmarkTest00078 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00078"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00078.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00078"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        float rand = new java.util.Random().nextFloat();
        String rememberMeKey = Float.toString(rand).substring(2);
        String user = ""Floyd"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextFloat() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00079"")
public class BenchmarkTest00079 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00079"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00079.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00079"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map18384 = new java.util.HashMap<String, Object>();
        map18384.put(""keyA-18384"", ""a-Value"");
        map18384.put(""keyB-18384"", param);
        map18384.put(""keyC"", ""another-Value"");
        bar = (String) map18384.get(""keyB-18384"");
        float rand = new java.util.Random().nextFloat();
        String rememberMeKey = Float.toString(rand).substring(2);
        String user = ""Floyd"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextFloat() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00080"")
public class BenchmarkTest00080 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00080"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00080.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00080"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        float rand = new java.util.Random().nextFloat();
        String rememberMeKey = Float.toString(rand).substring(2);
        String user = ""Floyd"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextFloat() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00081"")
public class BenchmarkTest00081 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00081"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00081.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00081"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00082"")
public class BenchmarkTest00082 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00082"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00082.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00082"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        StringBuilder sbxyz58640 = new StringBuilder(param);
        String bar = sbxyz58640.append(""_SafeStuff"").toString();
        int randNumber = new java.util.Random().nextInt(99);
        String rememberMeKey = Integer.toString(randNumber);
        String user = ""Inga"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt(int) executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00083"")
public class BenchmarkTest00083 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00083"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00083.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00083"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        int randNumber = new java.util.Random().nextInt(99);
        String rememberMeKey = Integer.toString(randNumber);
        String user = ""Inga"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt(int) executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00084"")
public class BenchmarkTest00084 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00084"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00084.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00084"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00085"")
public class BenchmarkTest00085 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00085"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00085.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00085"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map43974 = new java.util.HashMap<String, Object>();
        map43974.put(""keyA-43974"", ""a-Value"");
        map43974.put(""keyB-43974"", param);
        map43974.put(""keyC"", ""another-Value"");
        bar = (String) map43974.get(""keyB-43974"");
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00086"")
public class BenchmarkTest00086 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00086"", ""whatever"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/weakrand-00/BenchmarkTest00086.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00086"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00140"")
public class BenchmarkTest00140 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00140"") != null) {
            param = request.getHeader(""BenchmarkTest00140"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00160"")
public class BenchmarkTest00160 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00160"") != null) {
            param = request.getHeader(""BenchmarkTest00160"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        byte[] bytes = new byte[10];
        new java.util.Random().nextBytes(bytes);
        String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(bytes, true);
        String user = ""Byron"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextBytes() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00161"")
public class BenchmarkTest00161 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00161"") != null) {
            param = request.getHeader(""BenchmarkTest00161"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map91760 = new java.util.HashMap<String, Object>();
        map91760.put(""keyA-91760"", ""a_Value"");
        map91760.put(""keyB-91760"", param);
        map91760.put(""keyC"", ""another_Value"");
        bar = (String) map91760.get(""keyB-91760"");
        bar = (String) map91760.get(""keyA-91760"");
        double value = new java.util.Random().nextDouble();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Donna"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextDouble() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00162"")
public class BenchmarkTest00162 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00162"") != null) {
            param = request.getHeader(""BenchmarkTest00162"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00163"")
public class BenchmarkTest00163 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00163"") != null) {
            param = request.getHeader(""BenchmarkTest00163"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        StringBuilder sbxyz89305 = new StringBuilder(param);
        String bar = sbxyz89305.append(""_SafeStuff"").toString();
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00164"")
public class BenchmarkTest00164 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00164"") != null) {
            param = request.getHeader(""BenchmarkTest00164"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00165"")
public class BenchmarkTest00165 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00165"") != null) {
            param = request.getHeader(""BenchmarkTest00165"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00166"")
public class BenchmarkTest00166 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00166"") != null) {
            param = request.getHeader(""BenchmarkTest00166"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = param;
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00167"")
public class BenchmarkTest00167 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00167"") != null) {
            param = request.getHeader(""BenchmarkTest00167"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00168"")
public class BenchmarkTest00168 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00168"") != null) {
            param = request.getHeader(""BenchmarkTest00168"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00230"")
public class BenchmarkTest00230 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        byte[] bytes = new byte[10];
        new java.util.Random().nextBytes(bytes);
        String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(bytes, true);
        String user = ""Byron"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextBytes() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00231"")
public class BenchmarkTest00231 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map59585 = new java.util.HashMap<String, Object>();
        map59585.put(""keyA-59585"", ""a-Value"");
        map59585.put(""keyB-59585"", param);
        map59585.put(""keyC"", ""another-Value"");
        bar = (String) map59585.get(""keyB-59585"");
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00232"")
public class BenchmarkTest00232 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map84140 = new java.util.HashMap<String, Object>();
        map84140.put(""keyA-84140"", ""a_Value"");
        map84140.put(""keyB-84140"", param);
        map84140.put(""keyC"", ""another_Value"");
        bar = (String) map84140.get(""keyB-84140"");
        bar = (String) map84140.get(""keyA-84140"");
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00233"")
public class BenchmarkTest00233 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        int randNumber = new java.util.Random().nextInt(99);
        String rememberMeKey = Integer.toString(randNumber);
        String user = ""Inga"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt(int) executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00234"")
public class BenchmarkTest00234 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map35995 = new java.util.HashMap<String, Object>();
        map35995.put(""keyA-35995"", ""a_Value"");
        map35995.put(""keyB-35995"", param);
        map35995.put(""keyC"", ""another_Value"");
        bar = (String) map35995.get(""keyB-35995"");
        bar = (String) map35995.get(""keyA-35995"");
        int randNumber = new java.util.Random().nextInt(99);
        String rememberMeKey = Integer.toString(randNumber);
        String user = ""Inga"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt(int) executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00235"")
public class BenchmarkTest00235 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00236"")
public class BenchmarkTest00236 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00237"")
public class BenchmarkTest00237 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        int r = new java.util.Random().nextInt();
        String rememberMeKey = Integer.toString(r);
        String user = ""Ingrid"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00238"")
public class BenchmarkTest00238 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00239"")
public class BenchmarkTest00239 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String a22450 = param;
        StringBuilder b22450 = new StringBuilder(a22450);
        b22450.append("" SafeStuff"");
        b22450.replace(b22450.length() - ""Chars"".length(), b22450.length(), ""Chars"");
        java.util.HashMap<String, Object> map22450 = new java.util.HashMap<String, Object>();
        map22450.put(""key22450"", b22450.toString());
        String c22450 = (String) map22450.get(""key22450"");
        String d22450 = c22450.substring(0, c22450.length() - 1);
        String e22450 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d22450.getBytes())));
        String f22450 = e22450.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f22450);
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00240"")
public class BenchmarkTest00240 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00296"")
public class BenchmarkTest00296 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00296"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00297"")
public class BenchmarkTest00297 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00297"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        double stuff = new java.util.Random().nextGaussian();
        String rememberMeKey = Double.toString(stuff).substring(2);
        String user = ""Gayle"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextGaussian() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00298"")
public class BenchmarkTest00298 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00298"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        int randNumber = new java.util.Random().nextInt(99);
        String rememberMeKey = Integer.toString(randNumber);
        String user = ""Inga"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextInt(int) executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00299"")
public class BenchmarkTest00299 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00299"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00347"")
public class BenchmarkTest00347 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.io.InputStream param = request.getInputStream();
        java.io.InputStream bar = param;
        long l = new java.util.Random().nextLong();
        String rememberMeKey = Long.toString(l);
        String user = ""Logan"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextLong() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00368"")
public class BenchmarkTest00368 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00368"");
        if (param == null)
            param = """";
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00369"")
public class BenchmarkTest00369 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00369"");
        if (param == null)
            param = """";
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        double value = java.lang.Math.random();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Doug"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.lang.Math.random() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00397"")
public class BenchmarkTest00397 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00397"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null)
            bar = param.split("" "")[0];
        byte[] bytes = new byte[10];
        new java.util.Random().nextBytes(bytes);
        String rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(bytes, true);
        String user = ""Byron"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextBytes() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/weakrand-00/BenchmarkTest00398"")
public class BenchmarkTest00398 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00398"");
        if (param == null)
            param = """";
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map43631 = new java.util.HashMap<String, Object>();
        map43631.put(""keyA-43631"", ""a_Value"");
        map43631.put(""keyB-43631"", param);
        map43631.put(""keyC"", ""another_Value"");
        bar = (String) map43631.get(""keyB-43631"");
        bar = (String) map43631.get(""keyA-43631"");
        double value = new java.util.Random().nextDouble();
        String rememberMeKey = Double.toString(value).substring(2);
        String user = ""Donna"";
        String fullClassName = this.getClass().getName();
        String testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.') + 1 + ""BenchmarkTest"".length());
        user += testCaseNumber;
        String cookieName = ""rememberMe"" + testCaseNumber;
        boolean foundUser = false;
        javax.servlet.http.Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (int i = 0; !foundUser && i < cookies.length; i++) {
                javax.servlet.http.Cookie cookie = cookies[i];
                if (cookieName.equals(cookie.getName())) {
                    if (cookie.getValue().equals(request.getSession().getAttribute(cookieName))) {
                        foundUser = true;
                    }
                }
            }
        }
        if (foundUser) {
            response.getWriter().println(""Welcome back: "" + user + ""<br/>"");
        } else {
            javax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);
            rememberMe.setSecure(true);
            rememberMe.setPath(request.getRequestURI());
            request.getSession().setAttribute(cookieName, rememberMeKey);
            response.addCookie(rememberMe);
            response.getWriter().println(user + "" has been remembered with cookie: "" + rememberMe.getName() + "" whose value is: "" + rememberMe.getValue() + ""<br/>"");
        }
        response.getWriter().println(""Weak Randomness Test java.util.Random.nextDouble() executed"");
    }
}
",CWE330
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00003"")
public class BenchmarkTest00003 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00003"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00003.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00003"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = param;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00029"")
public class BenchmarkTest00029 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00029"");
            if (values != null)
                param = values[0];
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = param;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00046"")
public class BenchmarkTest00046 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00046"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] input = { (byte) '?' };
            Object inputParam = param;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00070"")
public class BenchmarkTest00070 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00070"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00070.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00070"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00071"")
public class BenchmarkTest00071 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00071"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00071.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00071"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00073"")
public class BenchmarkTest00073 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00073"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00073.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00073"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00074"")
public class BenchmarkTest00074 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest00074"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/hash-00/BenchmarkTest00074.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest00074"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map98790 = new java.util.HashMap<String, Object>();
        map98790.put(""keyA-98790"", ""a-Value"");
        map98790.put(""keyB-98790"", param);
        map98790.put(""keyC"", ""another-Value"");
        bar = (String) map98790.get(""keyB-98790"");
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00141"")
public class BenchmarkTest00141 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00141"") != null) {
            param = request.getHeader(""BenchmarkTest00141"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00143"")
public class BenchmarkTest00143 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest00143"") != null) {
            param = request.getHeader(""BenchmarkTest00143"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00223"")
public class BenchmarkTest00223 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map13848 = new java.util.HashMap<String, Object>();
        map13848.put(""keyA-13848"", ""a-Value"");
        map13848.put(""keyB-13848"", param);
        map13848.put(""keyC"", ""another-Value"");
        bar = (String) map13848.get(""keyB-13848"");
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00226"")
public class BenchmarkTest00226 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map56895 = new java.util.HashMap<String, Object>();
        map56895.put(""keyA-56895"", ""a_Value"");
        map56895.put(""keyB-56895"", param);
        map56895.put(""keyC"", ""another_Value"");
        bar = (String) map56895.get(""keyB-56895"");
        bar = (String) map56895.get(""keyA-56895"");
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00227"")
public class BenchmarkTest00227 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String a15913 = param;
        StringBuilder b15913 = new StringBuilder(a15913);
        b15913.append("" SafeStuff"");
        b15913.replace(b15913.length() - ""Chars"".length(), b15913.length(), ""Chars"");
        java.util.HashMap<String, Object> map15913 = new java.util.HashMap<String, Object>();
        map15913.put(""key15913"", b15913.toString());
        String c15913 = (String) map15913.get(""key15913"");
        String d15913 = c15913.substring(0, c15913.length() - 1);
        String e15913 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d15913.getBytes())));
        String f15913 = e15913.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g15913 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g15913);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00266"")
public class BenchmarkTest00266 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00266"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map42712 = new java.util.HashMap<String, Object>();
        map42712.put(""keyA-42712"", ""a-Value"");
        map42712.put(""keyB-42712"", param);
        map42712.put(""keyC"", ""another-Value"");
        bar = (String) map42712.get(""keyB-42712"");
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00267"")
public class BenchmarkTest00267 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00267"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        StringBuilder sbxyz11795 = new StringBuilder(param);
        String bar = sbxyz11795.append(""_SafeStuff"").toString();
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00268"")
public class BenchmarkTest00268 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00268"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00269"")
public class BenchmarkTest00269 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00269"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00272"")
public class BenchmarkTest00272 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00272"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00273"")
public class BenchmarkTest00273 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00273"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00274"")
public class BenchmarkTest00274 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00274"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = org.springframework.web.util.HtmlUtils.htmlEscape(param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00346"")
public class BenchmarkTest00346 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.io.InputStream param = request.getInputStream();
        java.io.InputStream bar = param;
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00371"")
public class BenchmarkTest00371 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00371"");
        if (param == null)
            param = """";
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00372"")
public class BenchmarkTest00372 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00372"");
        if (param == null)
            param = """";
        String bar;
        int num = 106;
        bar = (7 * 42) - num > 200 ? ""This should never happen"" : param;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00374"")
public class BenchmarkTest00374 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00374"");
        if (param == null)
            param = """";
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""hashAlg1"", ""SHA512"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00462"")
public class BenchmarkTest00462 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00462"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        java.security.Provider[] provider = java.security.Security.getProviders();
        java.security.MessageDigest md;
        try {
            if (provider.length > 1) {
                md = java.security.MessageDigest.getInstance(""SHA1"", provider[0]);
            } else {
                md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            }
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/hash-00/BenchmarkTest00464"")
public class BenchmarkTest00464 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00464"");
            if (values != null)
                param = values[0];
        }
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA1"", ""SUN"");
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            md.update(input);
            byte[] result = md.digest();
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""hash_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' hashed and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            System.out.println(""Problem executing hash - TestCase java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)"");
            throw new ServletException(e);
        }
        response.getWriter().println(""Hash Test java.security.MessageDigest.getInstance(java.lang.String,java.lang.String) executed"");
    }
}
",CWE328
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01822"")
public class BenchmarkTest01822 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest01822"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-02/BenchmarkTest01822.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest01822"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map20550 = new java.util.HashMap<String, Object>();
        map20550.put(""keyA-20550"", ""a-Value"");
        map20550.put(""keyB-20550"", param);
        map20550.put(""keyC"", ""another-Value"");
        bar = (String) map20550.get(""keyB-20550"");
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01823"")
public class BenchmarkTest01823 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest01823"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-02/BenchmarkTest01823.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest01823"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01829"")
public class BenchmarkTest01829 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest01829"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-02/BenchmarkTest01829.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest01829"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String a60792 = param;
        StringBuilder b60792 = new StringBuilder(a60792);
        b60792.append("" SafeStuff"");
        b60792.replace(b60792.length() - ""Chars"".length(), b60792.length(), ""Chars"");
        java.util.HashMap<String, Object> map60792 = new java.util.HashMap<String, Object>();
        map60792.put(""key60792"", b60792.toString());
        String c60792 = (String) map60792.get(""key60792"");
        String d60792 = c60792.substring(0, c60792.length() - 1);
        String e60792 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d60792.getBytes())));
        String f60792 = e60792.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f60792);
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01830"")
public class BenchmarkTest01830 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        javax.servlet.http.Cookie userCookie = new javax.servlet.http.Cookie(""BenchmarkTest01830"", ""someSecret"");
        userCookie.setMaxAge(60 * 3);
        userCookie.setSecure(true);
        userCookie.setPath(request.getRequestURI());
        response.addCookie(userCookie);
        javax.servlet.RequestDispatcher rd = request.getRequestDispatcher(""/crypto-02/BenchmarkTest01830.html"");
        rd.include(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        javax.servlet.http.Cookie[] theCookies = request.getCookies();
        String param = ""noCookieValueSupplied"";
        if (theCookies != null) {
            for (javax.servlet.http.Cookie theCookie : theCookies) {
                if (theCookie.getName().equals(""BenchmarkTest01830"")) {
                    param = java.net.URLDecoder.decode(theCookie.getValue(), ""UTF-8"");
                    break;
                }
            }
        }
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01895"")
public class BenchmarkTest01895 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest01895"") != null) {
            param = request.getHeader(""BenchmarkTest01895"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 86;
        if ((7 * 42) - num > 200)
            bar = ""This_should_always_happen"";
        else
            bar = param;
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01897"")
public class BenchmarkTest01897 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest01897"") != null) {
            param = request.getHeader(""BenchmarkTest01897"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = ""alsosafe"";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(1);
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01898"")
public class BenchmarkTest01898 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest01898"") != null) {
            param = request.getHeader(""BenchmarkTest01898"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01900"")
public class BenchmarkTest01900 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        if (request.getHeader(""BenchmarkTest01900"") != null) {
            param = request.getHeader(""BenchmarkTest01900"");
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 106;
        bar = (7 * 18) + num > 200 ? ""This_should_always_happen"" : param;
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01978"")
public class BenchmarkTest01978 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = param;
        if (param != null && param.length() > 1) {
            StringBuilder sbxyz6576 = new StringBuilder(param);
            bar = sbxyz6576.replace(param.length() - ""Z"".length(), param.length(), ""Z"").toString();
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01980"")
public class BenchmarkTest01980 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        StringBuilder sbxyz90777 = new StringBuilder(param);
        String bar = sbxyz90777.append(""_SafeStuff"").toString();
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest01981"")
public class BenchmarkTest01981 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> names = request.getHeaderNames();
        while (names.hasMoreElements()) {
            String name = (String) names.nextElement();
            if (org.owasp.benchmark.helpers.Utils.commonHeaders.contains(name)) {
                continue;
            }
            java.util.Enumeration<String> values = request.getHeaders(name);
            if (values != null && values.hasMoreElements()) {
                param = name;
                break;
            }
        }
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02017"")
public class BenchmarkTest02017 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02017"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02018"")
public class BenchmarkTest02018 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02018"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String a50268 = param;
        StringBuilder b50268 = new StringBuilder(a50268);
        b50268.append("" SafeStuff"");
        b50268.replace(b50268.length() - ""Chars"".length(), b50268.length(), ""Chars"");
        java.util.HashMap<String, Object> map50268 = new java.util.HashMap<String, Object>();
        map50268.put(""key50268"", b50268.toString());
        String c50268 = (String) map50268.get(""key50268"");
        String d50268 = c50268.substring(0, c50268.length() - 1);
        String e50268 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d50268.getBytes())));
        String f50268 = e50268.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(f50268);
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02019"")
public class BenchmarkTest02019 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02019"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5PADDING"", java.security.Security.getProvider(""SunJCE""));
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02020"")
public class BenchmarkTest02020 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02020"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map95233 = new java.util.HashMap<String, Object>();
        map95233.put(""keyA-95233"", ""a_Value"");
        map95233.put(""keyB-95233"", param);
        map95233.put(""keyC"", ""another_Value"");
        bar = (String) map95233.get(""keyB-95233"");
        bar = (String) map95233.get(""keyA-95233"");
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02022"")
public class BenchmarkTest02022 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02022"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02023"")
public class BenchmarkTest02023 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest02023"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar = doSomething(request, param);
        try {
            java.util.Properties benchmarkprops = new java.util.Properties();
            benchmarkprops.load(this.getClass().getClassLoader().getResourceAsStream(""benchmark.properties""));
            String algorithm = benchmarkprops.getProperty(""cryptoAlg1"", ""DESede/ECB/PKCS5Padding"");
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02101"")
public class BenchmarkTest02101 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest02101"");
        if (param == null)
            param = """";
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = param;
        if (param != null && param.length() > 1) {
            bar = param.substring(0, param.length() - 1);
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02192"")
public class BenchmarkTest02192 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest02192"");
            if (values != null)
                param = values[0];
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02193"")
public class BenchmarkTest02193 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest02193"");
            if (values != null)
                param = values[0];
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(1);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bob"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bob's your uncle"";
                break;
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02194"")
public class BenchmarkTest02194 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest02194"");
            if (values != null)
                param = values[0];
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02195"")
public class BenchmarkTest02195 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest02195"");
            if (values != null)
                param = values[0];
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02290"")
public class BenchmarkTest02290 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest02290"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02291"")
public class BenchmarkTest02291 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest02291"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String a10347 = param;
        StringBuilder b10347 = new StringBuilder(a10347);
        b10347.append("" SafeStuff"");
        b10347.replace(b10347.length() - ""Chars"".length(), b10347.length(), ""Chars"");
        java.util.HashMap<String, Object> map10347 = new java.util.HashMap<String, Object>();
        map10347.put(""key10347"", b10347.toString());
        String c10347 = (String) map10347.get(""key10347"");
        String d10347 = c10347.substring(0, c10347.length() - 1);
        String e10347 = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(d10347.getBytes())));
        String f10347 = e10347.split("" "")[0];
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String g10347 = ""barbarians_at_the_gate"";
        String bar = thing.doSomething(g10347);
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/crypto-02/BenchmarkTest02292"")
public class BenchmarkTest02292 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest02292"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = doSomething(request, param);
        java.security.SecureRandom random = new java.security.SecureRandom();
        byte[] iv = random.generateSeed(8);
        try {
            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""DES/CBC/PKCS5Padding"", ""SunJCE"");
            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(""DES"").generateKey();
            java.security.spec.AlgorithmParameterSpec paramSpec = new javax.crypto.spec.IvParameterSpec(iv);
            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key, paramSpec);
            byte[] input = { (byte) '?' };
            Object inputParam = bar;
            if (inputParam instanceof String)
                input = ((String) inputParam).getBytes();
            if (inputParam instanceof java.io.InputStream) {
                byte[] strInput = new byte[1000];
                int i = ((java.io.InputStream) inputParam).read(strInput);
                if (i == -1) {
                    response.getWriter().println(""This input source requires a POST, not a GET. Incompatible UI for the InputStream source."");
                    return;
                }
                input = java.util.Arrays.copyOf(strInput, i);
            }
            byte[] result = c.doFinal(input);
            java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), ""passwordFile.txt"");
            java.io.FileWriter fw = new java.io.FileWriter(fileTarget, true);
            fw.write(""secret_value="" + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true) + ""\n"");
            fw.close();
            response.getWriter().println(""Sensitive value: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(input)) + ""' encrypted and stored<br/>"");
        } catch (java.security.NoSuchAlgorithmException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.NoSuchProviderException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.NoSuchPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.IllegalBlockSizeException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (javax.crypto.BadPaddingException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidKeyException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        } catch (java.security.InvalidAlgorithmParameterException e) {
            response.getWriter().println(""Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case"");
            e.printStackTrace(response.getWriter());
            throw new ServletException(e);
        }
        response.getWriter().println(""Crypto Test javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String) executed"");
    }

    private static String doSomething(HttpServletRequest request, String param) throws ServletException, IOException {
        String bar = org.apache.commons.lang.StringEscapeUtils.escapeHtml(param);
        return bar;
    }
}
",CWE327
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00262"")
public class BenchmarkTest00262 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00262"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        java.io.File fileTarget = new java.io.File(bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00264"")
public class BenchmarkTest00264 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        java.util.Enumeration<String> headers = request.getHeaders(""BenchmarkTest00264"");
        if (headers != null && headers.hasMoreElements()) {
            param = headers.nextElement();
        }
        param = java.net.URLDecoder.decode(param, ""UTF-8"");
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting FileInputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00359"")
public class BenchmarkTest00359 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00359"");
        if (param == null)
            param = """";
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        java.io.File fileTarget = new java.io.File(bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00360"")
public class BenchmarkTest00360 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00360"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(new java.io.File(fileName));
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting FileInputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00362"")
public class BenchmarkTest00362 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00362"");
        if (param == null)
            param = """";
        String bar = param;
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(new java.io.File(fileName));
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00363"")
public class BenchmarkTest00363 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = request.getParameter(""BenchmarkTest00363"");
        if (param == null)
            param = """";
        String bar = param;
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            java.io.FileInputStream fileInputStream = new java.io.FileInputStream(fileName);
            java.io.FileDescriptor fd = fileInputStream.getFD();
            fos = new java.io.FileOutputStream(fd);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00452"")
public class BenchmarkTest00452 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00452"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00453"")
public class BenchmarkTest00453 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00453"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String startURIslashes = """";
        if (System.getProperty(""os.name"").indexOf(""Windows"") != -1)
            if (System.getProperty(""os.name"").indexOf(""Windows"") != -1)
                startURIslashes = ""/"";
            else
                startURIslashes = ""//"";
        try {
            java.net.URI fileURI = new java.net.URI(""file"", null, startURIslashes + org.owasp.benchmark.helpers.Utils.testfileDir.replace('\\', java.io.File.separatorChar).replace(' ', '_') + bar, null, null);
            java.io.File fileTarget = new java.io.File(fileURI);
            response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
            if (fileTarget.exists()) {
                response.getWriter().println("" And file already exists."");
            } else {
                response.getWriter().println("" But file doesn't exist yet."");
            }
        } catch (java.net.URISyntaxException e) {
            throw new ServletException(e);
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00455"")
public class BenchmarkTest00455 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00455"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(fileName);
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00456"")
public class BenchmarkTest00456 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00456"");
            if (values != null)
                param = values[0];
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map49381 = new java.util.HashMap<String, Object>();
        map49381.put(""keyA-49381"", ""a-Value"");
        map49381.put(""keyB-49381"", param);
        map49381.put(""keyC"", ""another-Value"");
        bar = (String) map49381.get(""keyB-49381"");
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(fileName);
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00457"")
public class BenchmarkTest00457 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00457"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(new java.io.File(fileName));
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00459"")
public class BenchmarkTest00459 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        java.util.Map<String, String[]> map = request.getParameterMap();
        String param = """";
        if (!map.isEmpty()) {
            String[] values = map.get(""BenchmarkTest00459"");
            if (values != null)
                param = values[0];
        }
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00525"")
public class BenchmarkTest00525 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00525"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        java.io.File fileTarget = new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir, bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00526"")
public class BenchmarkTest00526 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00526"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = param;
        java.io.File fileTarget = new java.io.File(bar, ""/Test.txt"");
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00527"")
public class BenchmarkTest00527 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00527"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        java.io.File fileTarget = new java.io.File(bar, ""/Test.txt"");
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00528"")
public class BenchmarkTest00528 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00528"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = ""safe!"";
        java.util.HashMap<String, Object> map6751 = new java.util.HashMap<String, Object>();
        map6751.put(""keyA-6751"", ""a-Value"");
        map6751.put(""keyB-6751"", param);
        map6751.put(""keyC"", ""another-Value"");
        bar = (String) map6751.get(""keyB-6751"");
        String startURIslashes = """";
        if (System.getProperty(""os.name"").indexOf(""Windows"") != -1)
            if (System.getProperty(""os.name"").indexOf(""Windows"") != -1)
                startURIslashes = ""/"";
            else
                startURIslashes = ""//"";
        try {
            java.net.URI fileURI = new java.net.URI(""file"", null, startURIslashes + org.owasp.benchmark.helpers.Utils.testfileDir.replace('\\', java.io.File.separatorChar).replace(' ', '_') + bar, null, null);
            java.io.File fileTarget = new java.io.File(fileURI);
            response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
            if (fileTarget.exists()) {
                response.getWriter().println("" And file already exists."");
            } else {
                response.getWriter().println("" But file doesn't exist yet."");
            }
        } catch (java.net.URISyntaxException e) {
            throw new ServletException(e);
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00529"")
public class BenchmarkTest00529 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String param = """";
        boolean flag = true;
        java.util.Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements() && flag) {
            String name = (String) names.nextElement();
            String[] values = request.getParameterValues(name);
            if (values != null) {
                for (int i = 0; i < values.length && flag; i++) {
                    String value = values[i];
                    if (value.equals(""BenchmarkTest00529"")) {
                        param = name;
                        flag = false;
                    }
                }
            }
        }
        String bar = param;
        String fileName = null;
        java.io.FileInputStream fis = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fis = new java.io.FileInputStream(fileName);
            byte[] b = new byte[1000];
            int size = fis.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileInputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                    fis = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00619"")
public class BenchmarkTest00619 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00619"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null) {
            java.util.List<String> valuesList = new java.util.ArrayList<String>();
            valuesList.add(""safe"");
            valuesList.add(param);
            valuesList.add(""moresafe"");
            valuesList.remove(0);
            bar = valuesList.get(0);
        }
        java.io.File fileTarget = new java.io.File(new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir), bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00623"")
public class BenchmarkTest00623 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00623"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        java.io.File fileTarget = new java.io.File(bar, ""/Test.txt"");
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00624"")
public class BenchmarkTest00624 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00624"");
        if (param == null)
            param = """";
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00627"")
public class BenchmarkTest00627 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00627"");
        if (param == null)
            param = """";
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        String fileName = null;
        java.io.FileOutputStream fos = null;
        try {
            fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
            fos = new java.io.FileOutputStream(fileName, false);
            response.getWriter().println(""Now ready to write to file: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName));
        } catch (Exception e) {
            System.out.println(""Couldn't open FileOutputStream on file: '"" + fileName + ""'"");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                    fos = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00629"")
public class BenchmarkTest00629 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest(request);
        String param = scr.getTheParameter(""BenchmarkTest00629"");
        if (param == null)
            param = """";
        String bar;
        int num = 196;
        if ((500 / 42) + num > 200)
            bar = param;
        else
            bar = ""This should never happen"";
        String fileName = org.owasp.benchmark.helpers.Utils.testfileDir + bar;
        java.io.InputStream is = null;
        try {
            java.nio.file.Path path = java.nio.file.Paths.get(fileName);
            is = java.nio.file.Files.newInputStream(path, java.nio.file.StandardOpenOption.READ);
            byte[] b = new byte[1000];
            int size = is.read(b);
            response.getWriter().println(""The beginning of file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileName) + ""' is:\n\n"");
            response.getWriter().println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(new String(b, 0, size)));
            is.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open InputStream on file: '"" + fileName + ""'"");
            response.getWriter().println(""Problem getting InputStream: "" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));
        } finally {
            if (is != null) {
                try {
                    is.close();
                    is = null;
                } catch (Exception e) {
                }
            }
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00696"")
public class BenchmarkTest00696 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00696"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        String bar;
        String guess = ""ABC"";
        char switchTarget = guess.charAt(2);
        switch(switchTarget) {
            case 'A':
                bar = param;
                break;
            case 'B':
                bar = ""bobs_your_uncle"";
                break;
            case 'C':
            case 'D':
                bar = param;
                break;
            default:
                bar = ""bobs_your_uncle"";
                break;
        }
        java.io.File fileTarget = new java.io.File(org.owasp.benchmark.helpers.Utils.testfileDir, bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00697"")
public class BenchmarkTest00697 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00697"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        String bar = """";
        if (param != null) {
            bar = new String(org.apache.commons.codec.binary.Base64.decodeBase64(org.apache.commons.codec.binary.Base64.encodeBase64(param.getBytes())));
        }
        java.io.File fileTarget = new java.io.File(bar);
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
"package org.owasp.benchmark.testcode;

@WebServlet(value = ""/pathtraver-00/BenchmarkTest00698"")
public class BenchmarkTest00698 extends HttpServlet {

    private static final long serialVersionUID = 1L;

    @Override
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        String[] values = request.getParameterValues(""BenchmarkTest00698"");
        String param;
        if (values != null && values.length > 0)
            param = values[0];
        else
            param = """";
        org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing();
        String bar = thing.doSomething(param);
        java.io.File fileTarget = new java.io.File(bar, ""/Test.txt"");
        response.getWriter().println(""Access to file: '"" + org.owasp.esapi.ESAPI.encoder().encodeForHTML(fileTarget.toString()) + ""' created."");
        if (fileTarget.exists()) {
            response.getWriter().println("" And file already exists."");
        } else {
            response.getWriter().println("" But file doesn't exist yet."");
        }
    }
}
",CWE22
